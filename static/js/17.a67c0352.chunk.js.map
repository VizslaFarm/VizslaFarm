{"version":3,"sources":["views/Partnership/Prices.tsx","views/Partnership/RequestButton.tsx","views/Partnership/Partnership.tsx","hooks/useTokenBalance.ts"],"names":["StyledCakeStats","styled","Button","theme","colors","textDisabled","Card","textSubtle","Prices","div","contrast","useTranslation","t","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","getCakeAddress","eggPrice","usePriceCakeBusd","circSupply","minus","BigNumber","getBalanceNumber","times","src","alt","height","width","StyledLink","Link","mediaQueries","sm","RainbowLight","keyframes","StyledFarmStakingCard","lg","CardMidContent","Heading","attrs","scale","activeNonCakePools","pools","filter","pool","isFinished","earningToken","symbol","includes","EarnAssetCard","orderBy","slice","target","href","id","color","justifyContent","mt","CTACards","BaseLayout","Partnership","Page","RequestButton","FetchStatus","slowRefresh","useRefresh","useState","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev"],"mappings":"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","file":"static/js/17.a67c0352.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardBody, Text , Button} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useI18n from 'hooks/useI18n'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/hooks'\n \nconst StyledButton = styled(Button)`\n  svg {\n    margin-right: 4px;\n    height: 20px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst StyledCakeStats = styled(Card)`\n  max-width: 100%;\n  border-radius: 8px;\n height: 100%;\n color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nconst Row = styled.div`\n  align-items: center;\n  font-size: 38px;\n  max-width: 100%;\n height: 370px;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n bottom: 10px;\n margin-top: 10px;\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.contrast};\n  font-size: 14px;\n  text-align: right;\n`\n const Heading = styled.div`\n font-size: 38px;\n margin-bottom: 20px;\n max-width: 100%;\n height: 100%;\n overflow: scroll;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n  `\nconst Prices = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n   const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  return (\n    <StyledCakeStats>\n   <img src=\"/images/Price1.png\" alt=\"hvi\" height=\"auto\" width=\"100%\" />\n   <img src=\"/images/Price2.png\" alt=\"hvi\" height=\"auto\" width=\"100%\" />\n    </StyledCakeStats>\n  )\n}\n\nexport default Prices\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Link } from '@pancakeswap/uikit'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledLink = styled(Link)`\n  margin-right: 16px;\n  display: flex;\n  justify-content: flex-end;\n\n  &:hover {\n    text-decoration: none;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1;\n  }\n`\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground: linear-gradient(\n  240deg,\n  rgb(0,0,0) 0%,\n    rgb(0,0,0) 10%,\n    rgb(0, 0, 0)20%,\n    rgb(13, 36, 34) 30%,\n    rgb(18, 48, 46) 40%,\n    rgb(34,89,84) 50%,\n    rgb(18, 48, 46)60%,\n    rgb(13, 36, 34) 70%,\n    rgb(0, 0, 0) 80%,\n    rgb(0,0,0) 90%,\n    rgb(0,0,0) 100%);\n  );\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 2.5s linear infinite;\n  border-radius: 25px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 32px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 2)\n// Always include CAKE\nconst assets = 'Application Form'\nconst assets2 = 'continue'\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t(' assets' )\n  const assetText2 = t(' assets2' )\n\n  return (\n    <StyledFarmStakingCard>\n      <StyledLink  target=\"blank\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSdjydSJYZHDqPlpfQtqjTdYMwe_qlNF9tml2K4fIhKckoTP8Q/viewform\" id=\"pool-cta\">\n        <CardBody>\n          <CardMidContent color=\"text\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"secondary\" mt={15} >\n              {assets2}\n            </Heading>\n            <ArrowForwardIcon mt={10} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </StyledLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Button,  } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport Prices from 'views/Partnership/Prices'\nimport RequestButton from 'views/Partnership/RequestButton'\n\n\nconst StyledButton = styled(Button)`\nmargin: 16px 50% 0;\npadding: 50px 70px;\nsvg {\n  margin: 0 4px 0 0;\n  height: 20px;\n  width: auto;\n  fill: ${({ theme }) => theme.colors.textDisabled};\n}\n`\n\n\nconst Row = styled.div`\n  align-items: center;\n  \n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst Hero = styled.div`\nalign-items: center;\nbackground-repeat: no-repeat;\nbackground-position: top center;\nbackground-image: url('images/banner1.jpg');\nbackground-size: 100% 100%;\nmin-height: 150px;\nopacity: 0.92;\nborder-radius: 25px;\ndisplay: flex;\njustify-content: center;\nflex-direction: column;\nmargin: auto;\nmargin-bottom: 24px;\nmargin-top: 0px;\npadding-top: 115px;\ntext-align: center;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    min-height: 360px;\n    padding-top: 0;\n        background-position: left center, right center;\n }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span ;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Partnership: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page >         \n            <div>\n           <CTACards>\n        <RequestButton/>\n        </CTACards>\n      </div>\n\n        <Prices/>\n      </Page>     \n\n     )\n    } \n\n\n\nexport default Partnership\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}