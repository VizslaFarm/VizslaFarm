{"version":3,"sources":["views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx","views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","utils/truncateWalletAddress.ts","views/Voting/config.ts","state/voting/hooks.ts","views/Voting/components/Proposals/tags.tsx"],"names":["VotingBox","styled","div","theme","colors","cardBorder","ModalInner","props","mb","maxWidth","Layout","mediaQueries","lg","DetailsView","total","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","t","useTranslation","as","fontSize","color","textTransform","bold","toFormat","alignItems","justifyContent","textAlign","initialState","verificationHash","BIG_ZERO","useGetVotingPower","block","isActive","useWeb3React","account","useState","votingPower","setVotingPower","isLoading","setIsLoading","useEffect","a","simpleRpcProvider","getBlockNumber","blockNumber","getActivePools","eligiblePools","poolAddresses","map","contractAddress","getAddress","getVotingPower","prevVotingPower","BigNumber","fetchVotingPower","Table","table","text","ThemedComponent","Title","scale","my","markdownComponents","h1","h2","h3","h4","h5","h6","p","ol","ul","pre","ReactMarkdown","remarkPlugins","gfm","components","ConfirmVoteView","DetailBox","Box","background","Details","proposal","startDate","Date","start","endDate","end","href","IPFS_GATEWAY","id","ml","slice","getBscScanLink","author","truncateWalletAddress","snapshot","proposalState","state","format","TextEllipsis","Text","Results","choices","votes","results","calculateVoteResults","votingStatus","useGetVotingStateLoadingStatus","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","choice","index","choiceVotes","totalChoiceVote","progress","eq","times","toNumber","hasVoted","some","vote","voter","toLowerCase","mt","title","variant","outline","mr","primaryStep","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count","height","MainView","isPending","onConfirm","onViewDetails","onDismiss","label","onClick","style","cursor","width","endIcon","spin","disabled","CastVoteModal","onSuccess","proposalId","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","library","useWeb3Provider","useTheme","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","toString","signMessage","sig","msg","address","sendSnaphotData","message","console","error","onBack","hideCloseButton","headerBackground","gradients","cardHeader","Choice","isChecked","isDisabled","ChoiceText","Vote","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","ConnectWalletButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","sm","VoteRow","isVoter","hasVotingPower","parseVotePower","incomingVote","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","isCoreProposal","body","ProposalState","ACTIVE","PageLoader","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","getCakeAddress","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","fetch","SNAPSHOT_HUB_API","method","headers","Accept","response","ok","json","Error","error_description","data","SNAPSHOT_VOTING_API","reduce","accum","choiceText","power","plus","startLength","endLength","substring","PROPOSALS_TO_SHOW","VOTE_THRESHOLD","useGetProposals","useSelector","voting","Object","values","_inValid","ProposalStateTag","PENDING","ProposalTypeTag"],"mappings":"kPAIaA,EAAYC,IAAOC,IAAV,wNAEA,qBAAGC,MAAkBC,OAAOC,cASrCC,EAAiC,SAACC,GAC7C,OAAO,cAAC,IAAD,aAAKC,GAAG,OAAOC,SAAS,SAAYF,M,+CCdvCG,E,KAAST,EAAOC,IAAV,yLAMR,qBAAGC,MAAkBQ,aAAaC,MAKvBF,O,kCCbf,yCA8EeG,IA/DiC,SAAC,GAO1C,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,YACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,iBAEQC,EAAMC,cAAND,EAER,OACE,eAAC,IAAD,CAAYZ,GAAG,IAAf,UACE,cAAC,KAAD,CAAMc,GAAG,IAAId,GAAG,OAAOe,SAAS,OAAOC,MAAM,aAA7C,SACGJ,EACC,qKAGJ,cAAC,KAAD,CAAMI,MAAM,YAAYC,cAAc,YAAYjB,GAAG,MAAMkB,MAAI,EAACH,SAAS,OAAzE,SACGH,EAAE,cAEL,eAAC,IAAD,WACE,cAAC,KAAD,CAAMI,MAAM,YAAZ,SAAyBJ,EAAE,uBAC3B,cAAC,KAAD,CAAMM,MAAI,EAACH,SAAS,OAApB,SACGT,EAAMa,SAAS,QAGpB,cAAC,KAAD,CAAMH,MAAM,YAAYC,cAAc,YAAYjB,GAAG,MAAMkB,MAAI,EAACH,SAAS,OAAzE,SACGH,EAAE,wBAEL,eAAC,IAAD,CAAMQ,WAAW,SAASC,eAAe,gBAAgBrB,GAAG,MAA5D,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,YAEL,cAAC,KAAD,CAAMU,UAAU,QAAhB,SAAyBf,EAAYY,SAAS,QAEhD,eAAC,IAAD,CAAMC,WAAW,SAASC,eAAe,gBAAgBrB,GAAG,MAA5D,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,sBAEL,cAAC,KAAD,CAAMU,UAAU,QAAhB,SAAyBb,EAAgBU,SAAS,QAEpD,eAAC,IAAD,CAAMC,WAAW,SAASC,eAAe,gBAAgBrB,GAAG,MAA5D,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,oBAEL,cAAC,KAAD,CAAMU,UAAU,QAAhB,SAAyBd,EAAiBW,SAAS,QAErD,eAAC,IAAD,CAAMC,WAAW,SAASC,eAAe,gBAAgBrB,GAAG,MAA5D,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,uBAEL,cAAC,KAAD,CAAMU,UAAU,QAAhB,SAAyBZ,EAAaS,SAAS,QAEjD,eAAC,IAAD,CAAMC,WAAW,SAASC,eAAe,gBAAgBrB,GAAG,MAA5D,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,iBAEL,cAAC,KAAD,CAAMU,UAAU,QAAhB,SAAyBX,EAAiBQ,SAAS,a,sJCrDrDI,EAAsB,CAC1BC,iBAAkB,KAClBjB,YAAakB,IACbjB,iBAAkBiB,IAClBhB,gBAAiBgB,IACjBf,aAAce,IACdd,iBAAkBc,IAClBnB,MAAOmB,KAmDMC,IAhDW,SAACC,GAAqE,IAArDC,IAAoD,yDAC7F,EAAoBC,cAAZC,EAAR,EAAQA,QACR,EAAsCC,mBAASR,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAkCF,qBAAWD,GAA7C,mBAAOI,EAAP,KAAkBC,EAAlB,KA0CA,OAxCAC,qBAAU,WAmCJN,GAAWF,GAlCO,uCAAG,gDAAAS,EAAA,yDACvBF,GAAa,GADU,cAIDR,EAJC,qCAIeW,IAAkBC,iBAJjC,iCAIfC,EAJe,eAKOC,YAAeD,GALtB,eAKfE,EALe,OAMfC,EAAgBD,EAAcE,KAAI,gBAAGC,EAAH,EAAGA,gBAAH,OAAyBC,YAAWD,MANvD,UAeXE,YAAejB,EAASa,EAAeH,GAf5B,iBAQnBjC,EARmB,EAQnBA,YACAI,EATmB,EASnBA,iBACAF,EAVmB,EAUnBA,gBACAH,EAXmB,EAWnBA,MACAI,EAZmB,EAYnBA,aACAF,EAbmB,EAanBA,iBACAgB,EAdmB,EAcnBA,iBAGEI,GACFK,GAAe,SAACe,GAAD,mBAAC,eACXA,GADU,IAEbxB,mBACAjB,YAAa,IAAI0C,IAAU1C,GAC3BI,iBAAkB,IAAIsC,IAAUtC,GAChCF,gBAAiB,IAAIwC,IAAUxC,GAC/BC,aAAc,IAAIuC,IAAUvC,GAC5BF,iBAAkB,IAAIyC,IAAUzC,GAChCF,MAAO,IAAI2C,IAAU3C,QA1BJ,yBA8BrB6B,GAAa,GA9BQ,2EAAH,oDAmCpBe,KAED,CAACpB,EAASH,EAAOM,EAAgBL,EAAUO,IAEvC,2BAAKH,GAAZ,IAAyBE,gB,6HCrErBiB,EAAQ1D,IAAO2D,MAAV,mJAOE,qBAAGzD,MAAkBC,OAAOyD,QAKnCC,EAAkB7D,IAAOC,IAAV,gIACV,qBAAGC,MAAkBC,OAAOyD,QAiBjCE,EAAQ,SAACxD,GACb,OAAO,cAAC,IAAD,aAASe,GAAG,KAAK0C,MAAM,KAAKC,GAAG,QAAW1D,KAuBpC2D,EApB2D,CACxEC,GAAIJ,EACJK,GAAIL,EACJM,GAAIN,EACJO,GAAIP,EACJQ,GAAIR,EACJS,GAAIT,EACJU,EAAG,SAAClE,GACF,OAAO,cAAC,KAAD,aAAMe,GAAG,IAAI2C,GAAG,QAAW1D,KAEpCqD,MAAOD,EACPe,GAAI,SAACnE,GACH,OAAO,cAACuD,EAAD,aAAiBxC,GAAG,MAASf,KAEtCoE,GAAI,SAACpE,GACH,OAAO,cAACuD,EAAD,aAAiBxC,GAAG,MAASf,KAEtCqE,IA7BU3E,IAAO2E,IAAV,iIACE,qBAAGzE,MAAkBC,OAAOyD,SCnBxBgB,IAJuC,SAACtE,GACrD,OAAO,cAAC,IAAD,aAAkBuE,cAAe,CAACC,KAAMC,WAAYd,GAAwB3D,M,iDCJzE0E,E,0NCaNC,EAAYjF,YAAOkF,IAAPlF,CAAH,wGACO,qBAAGE,MAAkBC,OAAOgF,cAC5B,qBAAGjF,MAAkBC,OAAOC,cAuDnCgF,EAnDyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjClE,EAAMC,cAAND,EACFmE,EAAY,IAAIC,KAAsB,IAAjBF,EAASG,OAC9BC,EAAU,IAAIF,KAAoB,IAAfF,EAASK,KAElC,OACE,eAAC,IAAD,CAAMnF,GAAG,OAAT,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASc,GAAG,KAAK0C,MAAM,KAAvB,SACG5C,EAAE,eAGP,eAAC,IAAD,WACE,eAAC,IAAD,CAAMQ,WAAW,SAASpB,GAAG,MAA7B,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAZ,SAA0BJ,EAAE,gBAC5B,cAAC,KAAD,CAAcwE,KAAI,UAAKC,IAAL,YAAqBP,EAASQ,IAAMC,GAAG,MAAzD,SACGT,EAASQ,GAAGE,MAAM,EAAG,QAG1B,eAAC,IAAD,CAAMpE,WAAW,SAASpB,GAAG,MAA7B,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAZ,SAA0BJ,EAAE,aAC5B,cAAC,KAAD,CAAcwE,KAAMK,YAAeX,EAASY,OAAQ,WAAYH,GAAG,MAAnE,SACGI,YAAsBb,EAASY,aAGpC,eAAC,IAAD,CAAMtE,WAAW,SAASpB,GAAG,OAA7B,UACE,cAAC,KAAD,CAAMgB,MAAM,aAAZ,SAA0BJ,EAAE,cAC5B,cAAC,KAAD,CAAcwE,KAAMK,YAAeX,EAASc,SAAU,SAAUL,GAAG,MAAnE,SACGT,EAASc,cAGd,eAAClB,EAAD,CAAWT,EAAE,OAAb,UACE,cAAC,IAAD,CAAkB4B,cAAef,EAASgB,MAAO9F,GAAG,QACpD,eAAC,IAAD,CAAMoB,WAAW,SAAjB,UACE,cAAC,KAAD,CAAMJ,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,gBAEL,cAAC,KAAD,CAAM2E,GAAG,MAAT,SAAgBQ,kBAAOhB,EAAW,yBAEpC,eAAC,IAAD,CAAM3D,WAAW,SAAjB,UACE,cAAC,KAAD,CAAMJ,MAAM,aAAaD,SAAS,OAAlC,SACGH,EAAE,cAEL,cAAC,KAAD,CAAM2E,GAAG,MAAT,SAAgBQ,kBAAOb,EAAS,mC,kBCvD7Bc,EANMvG,YAAOwG,KAAPxG,CAAH,qGCuFHyG,EA/DyB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC1CxF,EAAMC,cAAND,EACFyF,EAAUC,YAAqBF,GAC/BG,EAAeC,cACb1E,EAAYD,cAAZC,QACF2E,EAAaC,YAAkBN,GAErC,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAStF,GAAG,KAAK0C,MAAM,KAAvB,SACG5C,EAAE,uBAGP,eAAC,IAAD,WACG2F,IAAiBI,IAAyBC,MACzCT,EAAQvD,KAAI,SAACiE,EAAQC,GACnB,IAAMC,EAAcV,EAAQQ,IAAW,GACjCG,EAAkBN,YAAkBK,GAEpCE,EAAWR,EAAWS,GAAG,GAAK,EAAIF,EAAgBtH,IAAI+G,GAAYU,MAAM,KAAKC,WAC7EC,EAAWN,EAAYO,MAAK,SAACC,GACjC,OAAOzF,GAAWyF,EAAKC,MAAMC,gBAAkB3F,EAAQ2F,iBAGzD,OACE,eAAC,IAAD,CAAkBC,GAAIZ,EAAQ,EAAI,OAAS,MAA3C,UACE,eAAC,IAAD,CAAM1F,WAAW,SAASpB,GAAG,MAA7B,UACE,cAAC,EAAD,CAAcA,GAAG,MAAM2H,MAAOd,EAA9B,SACGA,IAEFQ,GACC,eAAC,KAAD,CAAKO,QAAQ,UAAUC,SAAO,EAACtC,GAAG,MAAlC,UACE,cAAC,IAAD,CAAqBuC,GAAG,QAD1B,IACoClH,EAAE,eAI1C,cAAC,IAAD,CAAKZ,GAAG,MAAR,SACE,cAAC,KAAD,CAAU+H,YAAad,EAAUzD,MAAM,SAEzC,eAAC,IAAD,CAAMpC,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,KAAD,CAAML,MAAM,aAAZ,SAA0BJ,EAAE,gBAAiB,CAAEN,MAAO0G,EAAgB7F,SAAS,OAC/E,eAAC,KAAD,WACG8F,EAASe,oBAAeC,EAAW,CAAEC,sBAAuB,EAAGC,sBAAuB,IADzF,YAhBMtB,MAwBfN,IAAiBI,IAAyByB,SACzCjB,IAAMhB,EAAQkC,QAAQzF,KAAI,SAAC0F,EAAOxB,GAChC,OACE,cAAC,IAAD,CAAiBY,GAAIZ,EAAQ,EAAI,OAAS,MAA1C,SACE,cAAC,KAAD,CAAUyB,OAAO,OAAOvI,GAAG,SADnBsI,a,kFH9EZ7D,K,YAAAA,E,mBAAAA,M,qCI2EG+D,GAxD2B,SAAC,GAQpC,IAPLjB,EAOI,EAPJA,KACAjH,EAMI,EANJA,MACAmI,EAKI,EALJA,UACAvG,EAII,EAJJA,UACAwG,EAGI,EAHJA,UACAC,EAEI,EAFJA,cACAC,EACI,EADJA,UAEQhI,EAAMC,cAAND,EAER,OACE,qCACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAMI,MAAM,YAAYhB,GAAG,MAAMiB,cAAc,YAAYF,SAAS,OAAOG,MAAI,EAA/E,SACGN,EAAE,gBAEL,cAAC,EAAD,CAAcM,MAAI,EAACH,SAAS,OAAOf,GAAG,MAAM2H,MAAOJ,EAAKsB,MAAxD,SACGtB,EAAKsB,QAER,cAAC,KAAD,CAAM7H,MAAM,YAAYhB,GAAG,MAAMiB,cAAc,YAAYF,SAAS,OAAOG,MAAI,EAA/E,SACGN,EAAE,uBAEJsB,EACC,cAAC,KAAD,CAAUqG,OAAO,OAAOvI,GAAG,SAE3B,eAAC,KAAD,CAAW8I,QAASH,EAAeI,MAAO,CAAEC,OAAQ,WAApD,UACE,cAAC,KAAD,CAAM9H,MAAI,EAACH,SAAS,OAApB,SACGT,EAAMa,SAAS,KAElB,cAAC,KAAD,CAAYqC,MAAM,KAAKoE,QAAQ,OAA/B,SACE,cAAC,IAAD,CAAkBqB,MAAM,cAI9B,cAAC,KAAD,CAAMnI,GAAG,IAAIE,MAAM,aAAaD,SAAS,OAAzC,SACGH,EAAE,0FAGP,cAAC,IAAD,CACEsB,UAAWuG,EACXS,QAAST,EAAY,cAAC,IAAD,CAAeU,MAAI,EAACnI,MAAM,iBAAoB,KACnEoI,SAAUlH,GAAa5B,EAAM4G,GAAG,GAChC+B,MAAM,OACNjJ,GAAG,MACH8I,QAASJ,EANX,SAQG9H,EAAE,kBAEL,cAAC,IAAD,CAAQgH,QAAQ,YAAYqB,MAAM,OAAOH,QAASF,EAAlD,SACGhI,EAAE,gB,sBC8CIyI,GAtGqC,SAAC,GAAuD,IAAD,EAApDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,WAAYhC,EAA6B,EAA7BA,KAAM5F,EAAuB,EAAvBA,MAAOiH,EAAgB,EAAhBA,UACzF,EAAwB7G,mBAA0B0C,EAAgB+E,MAAlE,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsC3H,oBAAS,GAA/C,mBAAO4H,EAAP,KAAoBC,EAApB,KACA,EAAkC7H,oBAAS,GAA3C,mBAAO0G,EAAP,KAAkBoB,EAAlB,KACQ/H,EAAYD,cAAZC,QACAlB,EAAMC,cAAND,EACAkJ,EAAeC,cAAfD,WACAE,EAAYC,cAAZD,QACArK,EAAUuK,cAAVvK,MACR,EASI+B,aAAkBC,EAAOgI,GAR3BzH,EADF,EACEA,UACA5B,EAFF,EAEEA,MACAC,EAHF,EAGEA,YACAC,EAJF,EAIEA,iBACAC,EALF,EAKEA,gBACAC,EANF,EAMEA,aACAC,EAPF,EAOEA,iBACAa,EARF,EAQEA,iBAGI2I,EAAcV,IAAShF,EAAgB+E,KACvCY,EAAaD,EAAc,KAAO,kBAAMT,EAAQjF,EAAgB+E,OAGhE7B,GAAK,mBACRlD,EAAgB+E,KAAO5I,EAAE,iBADjB,cAER6D,EAAgB4F,QAAUzJ,EAAE,iBAFpB,GAKL0J,EAAgB,WACpBV,GAAe,GACfhB,KAGI2B,GAAiB,uCAAG,gCAAAlI,EAAA,sEAEtBwH,GAAa,GACPW,EAAUC,KAAKC,UAAL,2BACXC,eADW,IAEdC,KAAMC,IAAgBC,KACtBC,QAAS,CACPjG,SAAUyE,EACV1C,OAAQU,EAAKyD,MACbC,SAAU,CACRjJ,YAAa1B,EAAM4K,WACnB1J,wBAXgB,SAgBJ2J,YAAYnB,EAASlI,EAAS0I,GAhB1B,cAgBhBY,EAhBgB,OAiBhBC,EAAe,CAAEC,QAASxJ,EAASuJ,IAAKb,EAASY,OAjBjC,SAoBhBG,YAAgBF,GApBA,cAqBtBxB,GAAa,GArBS,UAuBhBP,IAvBgB,QAyBtBgB,IAzBsB,kDA2BtBT,GAAa,GACbC,EAAWlJ,EAAE,SAAH,kCAAa,KAAO4K,SAC9BC,QAAQC,MAAR,MA7BsB,0DAAH,qDAiCvB,OACE,cAAC,KAAD,CACE/D,MAAOA,EAAM8B,GACbkC,OAAQvB,EACRxB,UAAWA,EACXgD,iBAAkBzB,EAClB0B,iBAAkBlM,EAAMC,OAAOkM,UAAUC,WAL3C,SAOE,eAAC,IAAD,CAAK/L,GAAG,OAAOiJ,MAAM,QAArB,UACGQ,IAAShF,EAAgB+E,MACxB,cAAC,GAAD,CACEjC,KAAMA,EACNrF,UAAWA,EACXuG,UAAWA,EACXnI,MAAOA,EACPoI,UAAW6B,GACX5B,cA7DgB,kBAAMe,EAAQjF,EAAgB4F,UA8D9CzB,UAAW0B,IAGdb,IAAShF,EAAgB4F,SACxB,cAAChK,GAAA,EAAD,CACEC,MAAOA,EACPC,YAAaA,EACbC,iBAAkBA,EAClBC,gBAAiBA,EACjBC,aAAcA,EACdC,iBAAkBA,U,gBCxFxBqL,GAASvM,IAAOoJ,MAAV,kLAEU,gBAAGlJ,EAAH,EAAGA,MAAOsM,EAAV,EAAUA,UAAV,OAA0BtM,EAAMC,OAAOqM,EAAY,UAAY,iBAEzE,qBAAGC,WAA+B,cAAgB,aAMxDC,GAAa1M,IAAOC,IAAV,qJAoED0M,GA3DmB,SAAC,GAA4B,IAA1BtH,EAAyB,EAAzBA,SAAa/E,EAAY,kBAC5D,EAAwBgC,mBAAgB,MAAxC,mBAAOwF,EAAP,KAAa8E,EAAb,KACQzL,EAAMC,cAAND,EACA0L,EAAiBvC,cAAjBuC,aACFC,EAAWC,cACT1K,EAAYD,cAAZC,QAEF2K,EAAa,uCAAG,sBAAApK,EAAA,sDACpBiK,EAAa1L,EAAE,eACf2L,EAASG,YAAW,CAAEnD,WAAYzE,EAASQ,GAAI3D,MAAOgL,OAAO7H,EAASc,aAFlD,2CAAH,qDAKnB,EAA+BgH,aAC7B,cAAC,GAAD,CAAetD,UAAWmD,EAAelD,WAAYzE,EAASQ,GAAIiC,KAAMA,EAAM5F,MAAOgL,OAAO7H,EAASc,aADhGiH,EAAP,oBAIA,OACE,eAAC,IAAD,2BAAU9M,GAAV,cACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASe,GAAG,KAAK0C,MAAM,KAAvB,SACG5C,EAAE,sBAGP,eAAC,IAAD,WACGkE,EAASqB,QAAQvD,KAAI,SAACiE,EAAQC,GAC7B,IAAMmF,EAAYnF,EAAQ,KAAR,OAAcS,QAAd,IAAcA,OAAd,EAAcA,EAAMyD,OAStC,OACE,eAACgB,GAAD,CAAqBC,UAAWA,EAAWC,YAAapK,EAAxD,UACE,qBAAKiH,MAAO,CAAE+D,WAAY,GAA1B,SACE,cAAC,KAAD,CAAOtJ,MAAM,KAAKwH,MAAOnE,EAAQkG,QAASd,EAAWe,SAVtC,WACnBX,EAAQ,CACNxD,MAAOhC,EACPmE,MAAOlE,EAAQ,KAOgEsC,UAAWtH,MAE1F,cAACqK,GAAD,UACE,cAAC,KAAD,CAAMrL,GAAG,OAAO6G,MAAOd,EAAvB,SACGA,QANMA,MAYhB/E,EACC,cAAC,IAAD,CAAQgH,QAAS+D,EAAsBzD,SAAmB,OAAT7B,EAAjD,SACG3G,EAAE,eAGL,cAACqM,EAAA,EAAD,Y,qBCvFJC,GAAMzN,YAAO0N,IAAP1N,CAAH,oFACoB,qBAAGE,MAAkBC,OAAOC,cAInDuN,GAAiB3N,YAAO4N,KAAP5N,CAAH,wCAkBL6N,GAdM,WACnB,OACE,cAAC,IAAD,UACGnG,IAAM,IAAIvE,KAAI,SAACkE,GAAD,OACb,eAACoG,GAAD,WACE,cAAC,KAAD,CAAU3E,OAAO,OAAOT,GAAG,OAAOmB,MAAM,UACxC,cAACmE,GAAD,CAAgB7E,OAAO,OAAOT,GAAG,OAAOmB,MAAM,SAC9C,cAACmE,GAAD,CAAgB7E,OAAO,OAAOU,MAAM,WAH5BnC,S,oBCfLyG,GAAgB9N,YAAOkF,KAAK6I,MAAM,CAAEpM,WAAY,UAAhC3B,CAAH,mDAIbgO,GAAehO,YAAOkF,IAAPlF,CAAH,uEAKZiO,GAAoBjO,YAAOkF,IAAPlF,CAAH,sEAkBfyN,GAbHzN,YAAOkO,IAAPlO,CAAH,4QACoB,qBAAGE,MAAkBC,OAAOC,cAMrD,qBAAGF,MAAkBQ,aAAayN,MCwBvBC,GAhCyB,SAAC,GAAuB,IAAD,EAApBtG,EAAoB,EAApBA,KAAMuG,EAAc,EAAdA,QACvClN,EAAMC,cAAND,EACFmN,KAAkB,UAACxG,EAAK0D,gBAAN,aAAC,EAAejJ,aAClCA,EAAc+L,EAAiB,IAAI9K,KAAUsE,EAAK0D,SAASjJ,aAAab,SAAS,GAAK,KAE5F,OACE,eAAC,GAAD,WACE,cAACoM,GAAD,UACE,eAAC,IAAD,CAAMnM,WAAW,SAAjB,UACE,cAAC,KAAD,CAAcgE,KAAMK,YAAe8B,EAAKC,MAAO,WAA/C,SAA4D7B,YAAsB4B,EAAKC,SACtFsG,GACC,eAAC,KAAD,CAAKlG,QAAQ,UAAUC,SAAO,EAACtC,GAAG,MAAlC,UACE,cAAC,IAAD,CAAqBuC,GAAG,QAD1B,IACoClH,EAAE,iBAK5C,cAAC6M,GAAD,UACE,cAAC,EAAD,CAAc9F,MAAOJ,EAAKzC,SAASqB,QAAQoB,EAAKV,OAAS,GAAzD,SACGU,EAAKzC,SAASqB,QAAQoB,EAAKV,OAAS,OAGzC,cAAC6G,GAAD,UACE,eAAC,IAAD,CAAMtM,WAAW,SAASC,eAAe,MAAzC,UACE,cAAC,KAAD,CAAMsG,MAAOJ,EAAK0D,SAASjJ,YAA3B,SAAyCA,IACxC+L,GAAkB,cAAC,KAAD,CAAc3I,KAAI,UAAKC,IAAL,YAAqBkC,EAAKjC,eCdnE0I,GAAiB,SAACC,GAAwB,IAAD,EAC7C,OAAOC,WAAU,OAACD,QAAD,IAACA,GAAD,UAACA,EAAchD,gBAAf,aAAC,EAAwBjJ,cAgF7BmM,GA7EqB,SAAC,GAAe,IAAb/H,EAAY,EAAZA,MACrC,EAA8BrE,oBAAS,GAAvC,mBAAOqM,EAAP,KAAgBC,EAAhB,KACQzN,EAAMC,cAAND,EACAkB,EAAYD,cAAZC,QACFwM,EAAeC,KAAQnI,EAAO,CAAC4H,GAAgB,WAAY,CAAC,OAAQ,SACpEQ,EAAeJ,EAAUE,EAAeA,EAAa9I,MAAM,EAf5C,IAiBfiJ,EADajI,gBACeG,IAAyBC,KAM3D,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAMxF,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,IAAD,CAASP,GAAG,KAAK0C,MAAM,KAAvB,SACG5C,EAAE,kBAAmB,CAAE0H,MAAOlC,EAAMiC,OAAOL,sBAE5CyG,GAAc,cAAC,IAAD,CAAetF,MAAI,EAACF,MAAM,eAG5CwF,GAAc,cAAC,GAAD,IAEfA,GAAcD,EAAanG,OAAS,GACnC,qCACE,eAAC,GAAD,WACE,cAACkF,GAAD,UACE,cAAC,KAAD,CAAMxM,SAAS,OAAOC,MAAM,aAAaC,cAAc,YAAYC,MAAI,EAAvE,SACGN,EAAE,aAGP,cAAC6M,GAAD,UACE,cAAC,KAAD,CAAM1M,SAAS,OAAOC,MAAM,aAAaC,cAAc,YAAYC,MAAI,EAAvE,SACGN,EAAE,gBAGP,cAAC8M,GAAD,UACE,cAAC,KAAD,CAAM3M,SAAS,OAAOC,MAAM,aAAaC,cAAc,YAAYC,MAAI,EAAvE,SACGN,EAAE,sBAIR4N,EAAa5L,KAAI,SAAC2E,GACjB,IAAMuG,EAAUhM,GAAWyF,EAAKC,MAAMC,gBAAkB3F,EAAQ2F,cAChE,OAAO,cAAC,GAAD,CAAuBF,KAAMA,EAAMuG,QAASA,GAA9BvG,EAAKjC,OAE5B,cAAC,IAAD,CAAMlE,WAAW,SAASC,eAAe,SAASqN,GAAG,MAAMC,GAAG,OAA9D,SACE,cAAC,IAAD,CACE1F,MAAM,OACNH,QA1CQ,WAClBuF,GAAYD,IA0CFxG,QAAQ,OACRsB,QACEkF,EACE,cAAC,IAAD,CAAepN,MAAM,UAAUiI,MAAM,SAErC,cAAC,IAAD,CAAiBjI,MAAM,UAAUiI,MAAM,SAG3CG,UAAWqF,EAXb,SAaa7N,EAAVwN,EAAY,OAAY,kBAMhCK,GAAsC,IAAxBD,EAAanG,QAC1B,cAAC,IAAD,CAAMjH,WAAW,SAASC,eAAe,SAASqN,GAAG,OAArD,SACE,cAAC,IAAD,CAAS5N,GAAG,KAAZ,SAAkBF,EAAE,0BCPfgO,UArEE,WACf,IAAQtJ,EAAuBuJ,cAAvBvJ,GACFR,EAAWgK,YAAexJ,GACxB1E,EAAMC,cAAND,EACAkB,EAAYD,cAAZC,QACFyK,EAAWC,cACXpG,EAAQ2I,YAAYzJ,GACpB0J,EAAoBxI,cACpByI,EAAwBC,cACxBC,EAAkBrN,GAAWsE,EAAMkB,MAAK,SAACC,GAAD,OAAUA,EAAKC,MAAMC,gBAAkB3F,EAAQ2F,iBAC7F,SAAmD3C,QAAnD,IAAmDA,IAAY,GAA/D,IAAQQ,GAAIiE,OAAZ,MAAyB,KAAzB,MAA+B3D,gBAA/B,MAA0C,KAA1C,EACMwJ,EACJJ,IAAsBrI,IAAyByB,SAAW6G,IAA0BtI,IAAyByB,QAkB/G,OAhBAhG,qBAAU,WACRmK,EAAS8C,YAAc/J,MACtB,CAACA,EAAIiH,IAGRnK,qBAAU,WAMJmH,GAAc3D,GALJ,uCAAG,sBAAAvD,EAAA,sEACTkK,EAASG,YAAW,CAAEnD,aAAY5H,MAAOgL,OAAO/G,MADvC,OAEf2G,EAAS+C,YAAY,CAAE/F,aAAY3D,cAFpB,2CAAH,oDAMZ2J,KAED,CAAChG,EAAY3D,EAAU2G,IAErBzH,EAKH,eAAC0K,EAAA,EAAD,CAAWd,GAAG,OAAd,UACE,cAAC,IAAD,CAAK1O,GAAG,OAAR,SACE,cAAC,IAAD,CAAQc,GAAI2O,IAAMC,GAAG,UAAU9H,QAAQ,OAAO+H,UAAW,cAAC,IAAD,CAAe3O,MAAM,UAAUiI,MAAM,SAAW0F,GAAG,IAA5G,SACG/N,EAAE,6BAGP,eAACV,EAAA,EAAD,WACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAKF,GAAG,OAAR,UACE,eAAC,IAAD,CAAMoB,WAAW,SAASpB,GAAG,MAA7B,UACE,cAAC,IAAD,CAAkB6F,cAAef,EAASgB,QAC1C,cAAC,IAAD,CAAiB8J,eAAgBA,YAAe9K,GAAWS,GAAG,WAEhE,cAAC,IAAD,CAASzE,GAAG,KAAK0C,MAAM,KAAKxD,GAAG,OAA/B,SACG8E,EAAS6C,QAEZ,cAAC,IAAD,UACE,cAACtD,EAAA,EAAD,UAAgBS,EAAS+K,aAG3BT,IAAkBD,GAAmBrK,EAASgB,QAAUgK,IAAcC,QACtE,cAAC,GAAD,CAAMjL,SAAUA,EAAU9E,GAAG,SAE/B,cAAC,GAAD,CAAOoG,MAAOA,OAEhB,eAAC,IAAD,WACE,cAAC,EAAD,CAAStB,SAAUA,IACnB,cAAC,EAAD,CAASqB,QAASrB,EAASqB,QAASC,MAAOA,aA/B1C,cAAC4J,EAAA,EAAD,M,2cChDEJ,EAAiB,SAAC9K,GAC7B,OAAOA,EAASY,OAAO+B,gBAAkBwI,IAAcxI,eAG5CyI,EAAwB,SAACC,EAAuBC,GAC3D,OAAQA,GACN,KAAKC,IAAaC,UAChB,OAAOH,EAAUI,QAAO,SAACzL,GAAD,OAAe8K,EAAe9K,MACxD,KAAKuL,IAAaG,KAChB,OAAOL,EAAUI,QAAO,SAACzL,GAAD,OAAc8K,EAAe9K,MACvD,KAAKuL,IAAaI,IAClB,QACE,OAAON,IAIAO,EAAyB,SAACP,EAAuBrK,GAC5D,OAAOqK,EAAUI,QAAO,SAACzL,GAAD,OAAcA,EAASgB,QAAUA,MAY9C6K,EAAmB,WAC9B,MAAO,CACLC,QAAS,GACTC,QAAS,GACTC,WAAY,CAAC,CAAEC,KAAM,OAAQC,OAAQ,CAAEC,OAAQ,OAAQ3F,QAAS4F,cAAkBC,SAAU,QAOnFxG,EAAsB,WACjC,MAAO,CACLyG,QAASC,IACTC,WAAYtM,KAAKuM,MAAQ,KAAKC,UAC9BC,MAAOC,MAOEnG,EAAe,uCAAG,WAAOC,GAAP,mBAAAnJ,EAAA,sEACNsP,MAAMC,IAAkB,CAC7CC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBlC,KAAMpF,KAAKC,UAAUc,KAPM,WACvBwG,EADuB,QAUfC,GAVe,gCAWPD,EAASE,OAXF,aAWrBxG,EAXqB,OAYrB,IAAIyG,MAAJ,OAAUzG,QAAV,IAAUA,OAAV,EAAUA,EAAO0G,mBAZI,wBAeVJ,EAASE,OAfC,eAevBG,EAfuB,yBAgBtBA,GAhBsB,4CAAH,sDAmBftP,EAAc,uCAAG,WAAOjB,EAAiBa,EAAyBhB,GAAjD,mBAAAU,EAAA,8DACRV,EADQ,qCACQW,IAAkBC,iBAD1B,iCACtBC,EADsB,cAELmP,MAAM,GAAD,OAAIW,IAAJ,UAAiC,CAC3DT,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBjC,KAAMpF,KAAKC,UAAU,CACnBY,QAASxJ,EACTH,MAAOa,EACPG,oBAVwB,cAEtBqP,EAFsB,iBAaTA,EAASE,OAbA,eAatBG,EAbsB,yBAcrBA,EAAKA,MAdgB,4CAAH,0DAiBd/L,EAAuB,SAACF,GACnC,OAAOA,EAAMmM,QAAO,SAACC,EAAOjL,GAC1B,IAAMkL,EAAalL,EAAKzC,SAASqB,QAAQoB,EAAKV,OAAS,GAEvD,OAAO,2BACF2L,GADL,kBAEGC,EAAaD,EAAMC,GAAN,sBAAwBD,EAAMC,IAA9B,CAA2ClL,IAAQ,CAACA,OAEnE,KAGQb,EAAoB,SAACN,GAChC,OAAOA,EAAMmM,QAAO,SAACC,EAAOjL,GAAU,IAAD,EAC7BmL,EAAQ,IAAIzP,IAAJ,UAAcsE,EAAK0D,gBAAnB,aAAc,EAAejJ,aAC3C,OAAOwQ,EAAMG,KAAKD,KACjBjR,O,iCCvGUkE,IAJe,SAAC2F,GAAqD,IAApCsH,EAAmC,uDAArB,EAAGC,EAAkB,uDAAN,EAC3E,MAAM,GAAN,OAAUvH,EAAQwH,UAAU,EAAGF,GAA/B,cAAiDtH,EAAQwH,UAAUxH,EAAQjD,OAASwK,M,iCCJtF,4MAAO,IAAME,EAAoB,GACpB9C,EAAgB,6CAChB5K,EAAe,+BACfgM,EAAmB,QACnBK,EAAgB,eAChBsB,EAAiB,I,iCCL9B,sLAIaC,EAAkB,WAC7B,IAAM9C,EAAY+C,aAAY,SAACpN,GAAD,OAAkBA,EAAMqN,OAAOhD,aAC7D,OAAOiD,OAAOC,OAAOlD,IAGVrB,EAAiB,SAACvF,GAE7B,OADiB2J,aAAY,SAACpN,GAAD,OAAkBA,EAAMqN,OAAOhD,UAAU5G,OAI3DwF,EAAc,SAACxF,GAC1B,IAAMnD,EAAQ8M,aAAY,SAACpN,GAAD,OAAkBA,EAAMqN,OAAO/M,MAAMmD,MAC/D,OAAOnD,EAAQA,EAAMmK,QAAO,SAAChJ,GAAD,OAA4B,IAAlBA,EAAK+L,YAAqB,IAGrD9M,EAAiC,WAE5C,OADqB0M,aAAY,SAACpN,GAAD,OAAkBA,EAAMqN,OAAOnE,sBAIrDE,EAA8B,WAEzC,OADqBgE,aAAY,SAACpN,GAAD,OAAkBA,EAAMqN,OAAOlE,2B,iMChBrDsE,EAAoD,SAAC,GAAiC,IAA/B1N,EAA8B,EAA9BA,cAAkB9F,EAAY,iBAChG,OAAI8F,IAAkBiK,IAAcC,OAC3B,cAAC,IAAD,eAAgBhQ,IAGrB8F,IAAkBiK,IAAc0D,QAC3B,cAAC,IAAD,eAAazT,IAGf,cAAC,IAAD,eAAeA,KAOX0T,EAAkD,SAAC,GAAkC,IAAhC7D,EAA+B,EAA/BA,eAAmB7P,EAAY,iBAC/F,OAAI6P,EACK,cAAC,IAAD,eAAa7P,IAGf,cAAC,IAAD,eAAkBA","file":"static/js/8.7aa4f5a2.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, BoxProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const VotingBox = styled.div`\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 12px;\n  display: flex;\n  height: 64px;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  padding: 0 16px;\n`\n\nexport const ModalInner: React.FC<BoxProps> = (props) => {\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\n}\n","import styled from 'styled-components'\n\nconst Layout = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: minmax(0, 1fr);\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: 1fr 332px;\n  }\n`\n\nexport default Layout\n","import React from 'react'\nimport { Text, Flex } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { VotingBox, ModalInner } from './styles'\n\ninterface DetailsViewProps {\n  total: BigNumber\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n}\n\nconst DetailsView: React.FC<DetailsViewProps> = ({\n  total,\n  cakeBalance,\n  cakeVaultBalance,\n  cakePoolBalance,\n  poolsBalance,\n  cakeBnbLpBalance,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <ModalInner mb=\"0\">\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\n        {t(\n          'Your voting power is determined by the amount of CAKE you held at the block detailed below. CAKE held in other places does not contribute to your voting power.',\n        )}\n      </Text>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Overview')}\n      </Text>\n      <VotingBox>\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\n        <Text bold fontSize=\"20px\">\n          {total.toFormat(3)}\n        </Text>\n      </VotingBox>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Your Cake Held Now')}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Wallet')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Manual CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Auto CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Other Syrup Pools')}\n        </Text>\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('CAKE BNB LP')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\n      </Flex>\n    </ModalInner>\n  )\n}\n\nexport default DetailsView\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n  total: BigNumber\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n  margin-bottom: 32px;\n  margin-top: 32px;\n  width: 100%;\n\n  td,\n  th {\n    color: ${({ theme }) => theme.colors.text};\n    padding: 8px;\n  }\n`\n\nconst ThemedComponent = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n\n  li {\n    margin-bottom: 8px;\n  }\n`\n\nconst Pre = styled.pre`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n  max-width: 100%;\n  overflow-x: auto;\n`\n\nconst Title = (props) => {\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\n}\n\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\n  h1: Title,\n  h2: Title,\n  h3: Title,\n  h4: Title,\n  h5: Title,\n  h6: Title,\n  p: (props) => {\n    return <Text as=\"p\" my=\"16px\" {...props} />\n  },\n  table: Table,\n  ol: (props) => {\n    return <ThemedComponent as=\"ol\" {...props} />\n  },\n  ul: (props) => {\n    return <ThemedComponent as=\"ul\" {...props} />\n  },\n  pre: Pre,\n}\n\nexport default markdownComponents\n","import React from 'react'\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport markdownComponents from './styles'\n\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\n}\n\nexport default ReactMarkdown\n","import { InjectedModalProps } from '@pancakeswap/uikit'\n\nexport enum ConfirmVoteView {\n  MAIN = 'main',\n  DETAILS = 'details',\n}\n\nexport interface CastVoteModalProps extends InjectedModalProps {\n  onSuccess: () => Promise<void>\n  proposalId: string\n  vote: {\n    label: string\n    value: number\n  }\n  block?: number\n}\n","import React from 'react'\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { format } from 'date-fns'\nimport { Proposal } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { IPFS_GATEWAY } from '../config'\nimport { ProposalStateTag } from '../components/Proposals/tags'\n\ninterface DetailsProps {\n  proposal: Proposal\n}\n\nconst DetailBox = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\n  const { t } = useTranslation()\n  const startDate = new Date(proposal.start * 1000)\n  const endDate = new Date(proposal.end * 1000)\n\n  return (\n    <Card mb=\"16px\">\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Details')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\n            {proposal.id.slice(0, 8)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.author, 'address')} ml=\"8px\">\n            {truncateWalletAddress(proposal.author)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.snapshot, 'block')} ml=\"8px\">\n            {proposal.snapshot}\n          </LinkExternal>\n        </Flex>\n        <DetailBox p=\"16px\">\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('Start Date')}\n            </Text>\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('End Date')}\n            </Text>\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n        </DetailBox>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Details\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst TextEllipsis = styled(Text)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nexport default TextEllipsis\n","import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Card,\n  CardBody,\n  CardHeader,\n  Heading,\n  Progress,\n  Skeleton,\n  Tag,\n  CheckmarkCircleIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport times from 'lodash/times'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\nimport TextEllipsis from '../components/TextEllipsis'\n\ninterface ResultsProps {\n  choices: string[]\n  votes: Vote[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\n  const { t } = useTranslation()\n  const results = calculateVoteResults(votes)\n  const votingStatus = useGetVotingStateLoadingStatus()\n  const { account } = useWeb3React()\n  const totalVotes = getTotalFromVotes(votes)\n\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Current Results')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\n          choices.map((choice, index) => {\n            const choiceVotes = results[choice] || []\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\n\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\n            const hasVoted = choiceVotes.some((vote) => {\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\n            })\n\n            return (\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\n                <Flex alignItems=\"center\" mb=\"8px\">\n                  <TextEllipsis mb=\"4px\" title={choice}>\n                    {choice}\n                  </TextEllipsis>\n                  {hasVoted && (\n                    <Tag variant=\"success\" outline ml=\"8px\">\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n                    </Tag>\n                  )}\n                </Flex>\n                <Box mb=\"4px\">\n                  <Progress primaryStep={progress} scale=\"sm\" />\n                </Box>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\n                  <Text>\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\n                  </Text>\n                </Flex>\n              </Box>\n            )\n          })}\n\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\n          times(choices.length).map((count, index) => {\n            return (\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\n                <Skeleton height=\"36px\" mb=\"4px\" />\n              </Box>\n            )\n          })}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Results\n","import React from 'react'\nimport { IconButton, Text, Skeleton, Button, AutoRenewIcon, ChevronRightIcon } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport TextEllipsis from '../TextEllipsis'\nimport { VotingBox, ModalInner } from './styles'\nimport { CastVoteModalProps } from './types'\n\ninterface MainViewProps {\n  vote: {\n    label: string\n    value: number\n  }\n  isLoading: boolean\n  isPending: boolean\n  total: BigNumber\n  onConfirm: () => void\n  onViewDetails: () => void\n  onDismiss: CastVoteModalProps['onDismiss']\n}\n\nconst MainView: React.FC<MainViewProps> = ({\n  vote,\n  total,\n  isPending,\n  isLoading,\n  onConfirm,\n  onViewDetails,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ModalInner>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Voting For')}\n        </Text>\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\n          {vote.label}\n        </TextEllipsis>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Your Voting Power')}\n        </Text>\n        {isLoading ? (\n          <Skeleton height=\"64px\" mb=\"24px\" />\n        ) : (\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\n            <Text bold fontSize=\"20px\">\n              {total.toFormat(3)}\n            </Text>\n            <IconButton scale=\"sm\" variant=\"text\">\n              <ChevronRightIcon width=\"24px\" />\n            </IconButton>\n          </VotingBox>\n        )}\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\n        </Text>\n      </ModalInner>\n      <Button\n        isLoading={isPending}\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={isLoading || total.eq(0)}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={onConfirm}\n      >\n        {t('Confirm Vote')}\n      </Button>\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\n        {t('Cancel')}\n      </Button>\n    </>\n  )\n}\n\nexport default MainView\n","import React, { useState } from 'react'\nimport { Box, Modal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { SnapshotCommand } from 'state/types'\nimport { signMessage } from 'utils/web3React'\nimport useToast from 'hooks/useToast'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport useTheme from 'hooks/useTheme'\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\nimport MainView from './MainView'\nimport DetailsView from './DetailsView'\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\n\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [isPending, setIsPending] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { library } = useWeb3Provider()\n  const { theme } = useTheme()\n  const {\n    isLoading,\n    total,\n    cakeBalance,\n    cakeVaultBalance,\n    cakePoolBalance,\n    poolsBalance,\n    cakeBnbLpBalance,\n    verificationHash,\n  } = useGetVotingPower(block, modalIsOpen)\n\n  const isStartView = view === ConfirmVoteView.MAIN\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\n\n  const title = {\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\n  }\n\n  const handleDismiss = () => {\n    setModalIsOpen(false)\n    onDismiss()\n  }\n\n  const handleConfirmVote = async () => {\n    try {\n      setIsPending(true)\n      const voteMsg = JSON.stringify({\n        ...generatePayloadData(),\n        type: SnapshotCommand.VOTE,\n        payload: {\n          proposal: proposalId,\n          choice: vote.value,\n          metadata: {\n            votingPower: total.toString(),\n            verificationHash,\n          },\n        },\n      })\n\n      const sig = await signMessage(library, account, voteMsg)\n      const msg: Message = { address: account, msg: voteMsg, sig }\n\n      // Save proposal to snapshot\n      await sendSnaphotData(msg)\n      setIsPending(false)\n\n      await onSuccess()\n\n      handleDismiss()\n    } catch (error) {\n      setIsPending(false)\n      toastError(t('Error'), error?.message)\n      console.error(error)\n    }\n  }\n\n  return (\n    <Modal\n      title={title[view]}\n      onBack={handleBack}\n      onDismiss={onDismiss}\n      hideCloseButton={!isStartView}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Box mb=\"24px\" width=\"320px\">\n        {view === ConfirmVoteView.MAIN && (\n          <MainView\n            vote={vote}\n            isLoading={isLoading}\n            isPending={isPending}\n            total={total}\n            onConfirm={handleConfirmVote}\n            onViewDetails={handleViewDetails}\n            onDismiss={handleDismiss}\n          />\n        )}\n        {view === ConfirmVoteView.DETAILS && (\n          <DetailsView\n            total={total}\n            cakeBalance={cakeBalance}\n            cakeVaultBalance={cakeVaultBalance}\n            cakePoolBalance={cakePoolBalance}\n            poolsBalance={poolsBalance}\n            cakeBnbLpBalance={cakeBnbLpBalance}\n          />\n        )}\n      </Box>\n    </Modal>\n  )\n}\n\nexport default CastVoteModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { Proposal } from 'state/types'\nimport { fetchVotes } from 'state/voting'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport CastVoteModal from '../components/CastVoteModal'\n\ninterface VoteProps extends CardProps {\n  proposal: Proposal\n}\n\ninterface State {\n  label: string\n  value: number\n}\n\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\n  align-items: center;\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\n  border-radius: 16px;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  margin-bottom: 16px;\n  padding: 16px;\n`\n\nconst ChoiceText = styled.div`\n  flex: 1;\n  padding-left: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 0;\n`\n\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\n  const [vote, setVote] = useState<State>(null)\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleSuccess = async () => {\n    toastSuccess(t('Vote cast!'))\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\n  }\n\n  const [presentCastVoteModal] = useModal(\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\n  )\n\n  return (\n    <Card {...props}>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Cast your vote')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {proposal.choices.map((choice, index) => {\n          const isChecked = index + 1 === vote?.value\n\n          const handleChange = () => {\n            setVote({\n              label: choice,\n              value: index + 1,\n            })\n          }\n\n          return (\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\n              <div style={{ flexShrink: 0 }}>\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\n              </div>\n              <ChoiceText>\n                <Text as=\"span\" title={choice}>\n                  {choice}\n                </Text>\n              </ChoiceText>\n            </Choice>\n          )\n        })}\n        {account ? (\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\n            {t('Cast Vote')}\n          </Button>\n        ) : (\n          <ConnectWalletButton />\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Vote\n","import React from 'react'\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport styled from 'styled-components'\n\nconst Row = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 16px 24px;\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  flex: 1;\n`\n\nconst VotesLoading = () => {\n  return (\n    <Box>\n      {times(10).map((index) => (\n        <Row key={index}>\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\n        </Row>\n      ))}\n    </Box>\n  )\n}\n\nexport default VotesLoading\n","import styled from 'styled-components'\nimport { Grid, Box } from '@pancakeswap/uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote } from 'state/types'\nimport { IPFS_GATEWAY } from '../../config'\nimport TextEllipsis from '../TextEllipsis'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface VoteRowProps {\n  vote: Vote\n  isVoter: boolean\n}\n\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\n  const { t } = useTranslation()\n  const hasVotingPower = !!vote.metadata?.votingPower\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\n\n  return (\n    <Row>\n      <AddressColumn>\n        <Flex alignItems=\"center\">\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateWalletAddress(vote.voter)}</LinkExternal>\n          {isVoter && (\n            <Tag variant=\"success\" outline ml=\"8px\">\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n            </Tag>\n          )}\n        </Flex>\n      </AddressColumn>\n      <ChoiceColumn>\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\n          {vote.proposal.choices[vote.choice - 1]}\n        </TextEllipsis>\n      </ChoiceColumn>\n      <VotingPowerColumn>\n        <Flex alignItems=\"center\" justifyContent=\"end\">\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\n        </Flex>\n      </VotingPowerColumn>\n    </Row>\n  )\n}\n\nexport default VoteRow\n","import React, { useState } from 'react'\nimport {\n  AutoRenewIcon,\n  Card,\n  CardHeader,\n  ChevronDownIcon,\n  Flex,\n  Heading,\n  Button,\n  ChevronUpIcon,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport orderBy from 'lodash/orderBy'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\nimport VotesLoading from '../components/Proposal/VotesLoading'\nimport VoteRow from '../components/Proposal/VoteRow'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\n\nconst VOTES_PER_VIEW = 20\n\ninterface VotesProps {\n  votes: Vote[]\n}\n\nconst parseVotePower = (incomingVote: Vote) => {\n  return parseFloat(incomingVote?.metadata?.votingPower)\n}\n\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\n  const [showAll, setShowAll] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\n  const voteStatus = useGetVotingStateLoadingStatus()\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\n\n  const handleClick = () => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\" scale=\"md\">\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\n          </Heading>\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\n        </Flex>\n      </CardHeader>\n      {!isFinished && <VotesLoading />}\n\n      {isFinished && displayVotes.length > 0 && (\n        <>\n          <Row>\n            <AddressColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Voter')}\n              </Text>\n            </AddressColumn>\n            <ChoiceColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Decision')}\n              </Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Vote Weight')}\n              </Text>\n            </VotingPowerColumn>\n          </Row>\n          {displayVotes.map((vote) => {\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\n          })}\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n            <Button\n              width=\"100%\"\n              onClick={handleClick}\n              variant=\"text\"\n              endIcon={\n                showAll ? (\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                ) : (\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                )\n              }\n              disabled={!isFinished}\n            >\n              {showAll ? t('Hide') : t('See All')}\n            </Button>\n          </Flex>\n        </>\n      )}\n\n      {isFinished && displayVotes.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\n        </Flex>\n      )}\n    </Card>\n  )\n}\n\nexport default Votes\n","import React, { useEffect } from 'react'\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\nimport {\n  useGetProposal,\n  useGetVotingStateLoadingStatus,\n  useGetVotes,\n  useGetProposalLoadingStatus,\n} from 'state/voting/hooks'\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport ReactMarkdown from 'components/ReactMarkdown'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { isCoreProposal } from '../helpers'\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\nimport Layout from '../components/Layout'\nimport Details from './Details'\nimport Results from './Results'\nimport Vote from './Vote'\nimport Votes from './Votes'\n\nconst Proposal = () => {\n  const { id }: { id: string } = useParams()\n  const proposal = useGetProposal(id)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const votes = useGetVotes(id)\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\n  const isPageLoading =\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\n\n  useEffect(() => {\n    dispatch(fetchProposal(id))\n  }, [id, dispatch])\n\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\n  useEffect(() => {\n    const getVotes = async () => {\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\n      dispatch(verifyVotes({ proposalId, snapshot }))\n    }\n\n    if (proposalId && snapshot) {\n      getVotes()\n    }\n  }, [proposalId, snapshot, dispatch])\n\n  if (!proposal) {\n    return <PageLoader />\n  }\n\n  return (\n    <Container py=\"40px\">\n      <Box mb=\"40px\">\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\n          {t('Back to Vote Overview')}\n        </Button>\n      </Box>\n      <Layout>\n        <Box>\n          <Box mb=\"32px\">\n            <Flex alignItems=\"center\" mb=\"8px\">\n              <ProposalStateTag proposalState={proposal.state} />\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\n            </Flex>\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\n              {proposal.title}\n            </Heading>\n            <Box>\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\n            </Box>\n          </Box>\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\n            <Vote proposal={proposal} mb=\"16px\" />\n          )}\n          <Votes votes={votes} />\n        </Box>\n        <Box>\n          <Details proposal={proposal} />\n          <Results choices={proposal.choices} votes={votes} />\n        </Box>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default Proposal\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\n\nexport const isCoreProposal = (proposal: Proposal) => {\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\n}\n\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\n  switch (proposalType) {\n    case ProposalType.COMMUNITY:\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\n    case ProposalType.CORE:\n      return proposals.filter((proposal) => isCoreProposal(proposal))\n    case ProposalType.ALL:\n    default:\n      return proposals\n  }\n}\n\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\n  return proposals.filter((proposal) => proposal.state === state)\n}\n\nexport interface Message {\n  address: string\n  msg: string\n  sig: string\n}\n\n/**\n * Generates metadata required by snapshot to validate payload\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\n  }\n}\n\n/**\n * Returns data that is required on all snapshot payloads\n */\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE,\n  }\n}\n\n/**\n * General function to send commands to the snapshot api\n */\nexport const sendSnaphotData = async (message: Message) => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error?.error_description)\n  }\n\n  const data = await response.json()\n  return data\n}\n\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      address: account,\n      block: blockNumber,\n      poolAddresses,\n    }),\n  })\n  const data = await response.json()\n  return data.data\n}\n\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\n  return votes.reduce((accum, vote) => {\n    const choiceText = vote.proposal.choices[vote.choice - 1]\n\n    return {\n      ...accum,\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\n    }\n  }, {})\n}\n\nexport const getTotalFromVotes = (votes: Vote[]) => {\n  return votes.reduce((accum, vote) => {\n    const power = new BigNumber(vote.metadata?.votingPower)\n    return accum.plus(power)\n  }, BIG_ZERO)\n}\n","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMIN_ADDRESS = '0xa3D2124E4023ea5c74dC749012E0B46E42bDD648'\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cakevote.eth'\nexport const VOTE_THRESHOLD = 10\n","import { useSelector } from 'react-redux'\nimport { State } from '../types'\n\n// Voting\nexport const useGetProposals = () => {\n  const proposals = useSelector((state: State) => state.voting.proposals)\n  return Object.values(proposals)\n}\n\nexport const useGetProposal = (proposalId: string) => {\n  const proposal = useSelector((state: State) => state.voting.proposals[proposalId])\n  return proposal\n}\n\nexport const useGetVotes = (proposalId: string) => {\n  const votes = useSelector((state: State) => state.voting.votes[proposalId])\n  return votes ? votes.filter((vote) => vote._inValid !== true) : []\n}\n\nexport const useGetVotingStateLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.voteLoadingStatus)\n  return votingStatus\n}\n\nexport const useGetProposalLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.proposalLoadingStatus)\n  return votingStatus\n}\n","import React from 'react'\nimport { TagProps } from '@pancakeswap/uikit'\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\nimport { ProposalState } from 'state/types'\n\ninterface ProposalStateTagProps extends TagProps {\n  proposalState: ProposalState\n}\n\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\n  if (proposalState === ProposalState.ACTIVE) {\n    return <VoteNowTag {...props} />\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return <SoonTag {...props} />\n  }\n\n  return <ClosedTag {...props} />\n}\n\ninterface ProposalTypeTagProps extends TagProps {\n  isCoreProposal: boolean\n}\n\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\n  if (isCoreProposal) {\n    return <CoreTag {...props} />\n  }\n\n  return <CommunityTag {...props} />\n}\n"],"sourceRoot":""}