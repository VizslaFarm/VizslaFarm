{"version":3,"sources":["hooks/useApproveConfirmTransaction.ts","views/Profile/components/ApproveConfirmButtons.tsx","components/FoldableText/index.tsx","../node_modules/lodash/every.js","../node_modules/lodash/_arrayEvery.js","../node_modules/lodash/_baseEvery.js","views/Ifos/components/IfoFoldableCard/types.ts","views/Ifos/components/Hero.tsx","views/Ifos/hooks/helpers.ts","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/v2/useGetWalletIfoData.ts","components/TokenImage/index.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/components/IfoQuestions/config.ts","views/Ifos/components/IfoQuestions/index.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/components/IfoCardV2Data.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV1Data.tsx","views/Ifos/PastIfo.tsx","views/Ifos/index.tsx"],"names":["initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","t","useTranslation","account","useWeb3React","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","useEffect","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","a","tx","wait","status","handleConfirm","ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","Wrapper","Flex","StyledExpandableLabelWrapper","StyledChildrenFlex","isExpanded","colors","inputSecondary","FoldableText","title","children","props","useState","setIsExpanded","flexDirection","alignItems","pb","fontWeight","expanded","arrayEvery","require","baseEvery","baseIteratee","isArray","isIterateeCall","module","exports","collection","predicate","guard","func","array","index","length","baseEach","value","EnableStatus","StyledHero","isDark","CurtainBottom","Hero","mb","Container","as","scale","bold","fontSize","getStatus","currentBlock","startBlock","endBlock","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","fastRefresh","useRefresh","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","setState","useBlock","fetchIfoData","useCallback","ifoCalls","name","params","multicallv2","ifoV2Abi","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","totalBlocks","prev","BSC_BLOCK_TIME","currencyPriceInUSD","useIfoAllowance","tokenContract","spenderAddress","dependency","allowance","setAllowance","res","console","error","fetch","useGetWalletIfoData","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","contract","useIfoV2Contract","currencyContract","useERC20","getAddress","map","method","userInfo","amounts","prevState","setPendingTx","poolId","setIsClaimed","getImageUrlFromToken","token","tokens","wbnb","TokenPairImage","primaryToken","secondaryToken","primarySrc","secondarySrc","TokenImage","src","PercentageOfTotal","userAmount","totalAmount","percentOfUserDisplay","isGreaterThan","times","toLocaleString","maximumFractionDigits","num","SkeletonCardActions","height","SkeletonCardTokens","variant","mr","SkeletonCardDetails","TokenSection","CakeBnbTokenSection","cake","Label","textTransform","Value","style","wordBreak","IfoCardTokens","publicIfoData","walletIfoData","hasProfile","enableStatus","useTooltip","placement","targetRef","tooltip","tooltipVisible","publicPoolCharacteristics","userPoolCharacteristics","distributionRatio","textAlign","saleAmount","pl","ratio","ENABLED","mt","IS_ENABLING","getBalanceNumber","decimals","isEqualTo","ml","ref","display","marginLeft","multiplierValues","gasPrice","BIG_TEN","pow","BIG_NINE","ContributeModal","userCurrencyBalance","onDismiss","setValue","raisingTokenContract","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","response","currentAllowance","gt","approve","ethers","constants","MaxUint256","depositPool","PoolIds","maximumLpCommitable","minus","isLessThanOrEqualTo","maxWidth","getBalanceAmount","flexGrow","split","toLocaleLowerCase","currencyValue","toFixed","onUserInput","isWarning","balance","multiplierValue","isNaN","eq","GetLpModal","margin","Link","external","href","BASE_ADD_LIQUIDITY_URL","minWidth","ContributeButton","toastSuccess","useTokenBalance","handleContributeSuccess","amount","Promise","all","useModal","onPresentContributeModal","onPresentGetLpModal","isDisabled","isGreaterThanOrEqualTo","ClaimButton","ifoVersion","isPending","handleClaim","harvest","harvestPool","IfoCardActions","version","to","ConnectWalletButton","FooterEntry","label","small","IfoCardDetails","poolCharacteristic","maxLpTokens","totalCommittedPercent","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","formatNumber","paddingTop","raiseAmount","cakeToBurn","tokenOfferingPrice","cardConfig","SmallCard","config","useProfile","isProfileLoading","Timer","countdownToUse","timeUntil","getTimePeriods","suffix","toLowerCase","animation","day","days","hour","hours","minute","minutes","getBscScanLink","target","rel","MIN_DOLLAR_FOR_ACHIEVEMENT","AchievementFlex","isFinished","StyledLinkExternal","LinkExternal","Achievement","tokenName","campaignTitle","minLpForAchievement","minHeight","articleUrl","useIfoApprove","StyledCard","Card","Header","CardHeader","ifoId","FoldableContent","isVisible","isActive","gradients","bubblegum","dropdown","CardsWrapper","singleCard","StyledCardBody","CardBody","StyledCardFooter","CardFooter","backgroundAlt","IfoFoldableCard","isInitiallyVisible","setIsVisible","DISABLED","setEnableStatus","Ribbon","variantColor","ribbonPosition","text","getRibbonComponent","lte","checkAllowance","ribbon","primaryStep","IfoPoolCard","IfoLayout","textSubtle","sm","IfoSteps","stepsValidationStatus","getStatusProp","arePreviousValid","every","slice","Boolean","renderCardBody","step","isStepValid","_","description","ImageWrapper","DetailsWrapper","IfoQuestions","alt","i","desc","activeIfo","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV2Data","IfoCardV2Data","ifoV1Abi","raisingAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","claimed","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","url","isExact","activeIndex","exact","CurrentIfo"],"mappings":"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","file":"static/js/9.bb22f9fd.chunk.js","sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => ethers.providers.TransactionResponse\n  onConfirm: () => ethers.providers.TransactionResponse\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n  onApproveSuccess?: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FoldableTextProps extends FlexProps {\n  title?: string\n}\n\nconst Wrapper = styled(Flex)`\n  cursor: pointer;\n`\n\nconst StyledExpandableLabelWrapper = styled(Flex)`\n  button {\n    align-items: center;\n    justify-content: flex-start;\n  }\n`\n\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\n  overflow: hidden;\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\n        <Text fontWeight=\"bold\">{title}</Text>\n        <StyledExpandableLabelWrapper>\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n            {isExpanded ? t('Hide') : t('Details')}\n          </ExpandableLabel>\n        </StyledExpandableLabelWrapper>\n      </Flex>\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\n        {children}\n      </StyledChildrenFlex>\n    </Wrapper>\n  )\n}\n\nexport default FoldableText\n","var arrayEvery = require('./_arrayEvery'),\n    baseEvery = require('./_baseEvery'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = every;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = arrayEvery;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nmodule.exports = baseEvery;\n","export enum EnableStatus {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n  IS_ENABLING = 'is_enabling',\n}\n\nexport default EnableStatus\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst getGradient = (isDark: boolean) => {\n  if (isDark) {\n    return 'repeating-linear-gradient(to right, #332453, #332453 40px, #281D44 40px, #281D44 80px)'\n  }\n\n  return 'repeating-linear-gradient(to right, #21d4e2, #21d4e2 40px, #53dee9 40px, #53dee9 80px)'\n}\n\nconst StyledHero = styled.div`\n  background: ${({ theme }) => getGradient(theme.isDark)};\n  padding-bottom: 40px;\n  padding-top: 40px;\n`\n\nconst CurtainBottom = styled.div`\n  background-image: url('/images/curtain-bottom-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\n  background-repeat: repeat-x;\n  background-size: contain;\n  height: 20px;\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"32px\">\n      <StyledHero>\n        <Container>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\">\n            {t('IFO: Initial Farm Offerings')}\n          </Heading>\n          <Text bold fontSize=\"20px\">\n            {t('Buy new tokens with a brand new token sale model.')}\n          </Text>\n        </Container>\n      </StyledHero>\n      <CurtainBottom />\n    </Box>\n  )\n}\n\nexport default Hero\n","import { IfoStatus } from 'config/constants/types'\n\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return 'idle'\n  }\n\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return 'idle'\n}\n\nexport default null\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [\n      {\n        address,\n        name: 'startBlock',\n      },\n      {\n        address,\n        name: 'endBlock',\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [0],\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [1],\n      },\n      {\n        address,\n        name: 'viewPoolTaxRateOverflow',\n        params: [1],\n      },\n      {\n        address,\n        name: 'numberPoints',\n      },\n    ]\n\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(\n      ifoV2Abi,\n      ifoCalls,\n    )\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'ethers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\n// Retrieve IFO allowance\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.allowance(account, spenderAddress)\n        setAllowance(new BigNumber(res.toString()))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\nexport default useIfoAllowance\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport {\n  TokenPairImage as UIKitTokenPairImage,\n  TokenPairImageProps as UIKitTokenPairImageProps,\n  TokenImage as UIKitTokenImage,\n  ImageProps,\n} from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { Token } from 'config/constants/types'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = getAddress(token.symbol === 'BNB' ? tokens.wbnb.address : token.address)\n  return `/images/tokens/${address}.png`\n}\n\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\n  return (\n    <UIKitTokenPairImage\n      primarySrc={getImageUrlFromToken(primaryToken)}\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\n      {...props}\n    />\n  )\n}\n\ninterface TokenImageProps extends ImageProps {\n  token: Token\n}\n\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ninterface PercentageOfTotalProps extends TextProps {\n  userAmount: BigNumber\n  totalAmount: BigNumber\n}\n\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\n  const { t } = useTranslation()\n  const percentOfUserContribution = totalAmount.isGreaterThan(0)\n    ? userAmount.div(totalAmount).times(100).toNumber()\n    : BIG_ZERO\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\n\n  return (\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\n      {t('%num% of total', { num: percentOfUserDisplay })}\n    </Text>\n  )\n}\n\nexport default PercentageOfTotal\n","import React from 'react'\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React from 'react'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\nimport { EnableStatus } from '../types'\nimport PercentageOfTotal from './PercentageOfTotal'\nimport { SkeletonCardTokens } from './Skeletons'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: Token\n  secondaryToken?: Token\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n    if (!primaryToken) {\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\n    }\n\n    if (primaryToken && secondaryToken) {\n      return (\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={primaryToken}\n          height={32}\n          width={32}\n          secondaryToken={secondaryToken}\n          mr=\"16px\"\n        />\n      )\n    }\n\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\nconst CakeBnbTokenSection: React.FC<TokenSectionProps> = (props) => {\n  return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\n}\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  hasProfile,\n  isLoading,\n  onApprove,\n  enableStatus,\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry, you didn’t contribute enough LP tokens to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your LP tokens.',\n    ),\n    { placement: 'bottom' },\n  )\n\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency, token } = ifo\n  const { hasClaimed } = userPoolCharacteristics\n  const distributionRatio = ifo[poolId].distributionRatio * 100\n\n  const renderTokenSection = () => {\n    if (isLoading) {\n      return <SkeletonCardTokens />\n    }\n    if (account && !hasProfile) {\n      if (publicIfoData.status === 'finished') {\n        return <Text textAlign=\"center\">{t('Activate PancakeSwap Profile to take part in next IFO‘s!')}</Text>\n      }\n      return <Text textAlign=\"center\">{t('You need an active PancakeSwap Profile to take part in an IFO!')}</Text>\n    }\n    if (publicIfoData.status === 'coming_soon') {\n      return (\n        <>\n          <TokenSection>\n            <Label>{t('On sale')}</Label>\n            <Value>{ifo[poolId].saleAmount}</Value>\n          </TokenSection>\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\n          </Text>\n          {enableStatus !== EnableStatus.ENABLED && account && (\n            <Button\n              width=\"100%\"\n              mt=\"16px\"\n              onClick={onApprove}\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            >\n              {t('Enable')}\n            </Button>\n          )}\n        </>\n      )\n    }\n    if (publicIfoData.status === 'live') {\n      return (\n        <>\n          <CakeBnbTokenSection mb=\"24px\">\n            <Label>{t('Your %symbol% committed', { symbol: currency.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </CakeBnbTokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n          </TokenSection>\n        </>\n      )\n    }\n    if (publicIfoData.status === 'finished') {\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <BunnyPlaceholderIcon width={80} mb=\"16px\" />\n          <Text>{t('You didn’t participate in this sale!')}</Text>\n        </Flex>\n      ) : (\n        <>\n          <CakeBnbTokenSection mb=\"24px\">\n            <Label>\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: currency.symbol })}\n            </Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </CakeBnbTokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\n                  <HelpIcon />\n                </div>\n              )}\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n          </TokenSection>\n        </>\n      )\n    }\n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { ethers } from 'ethers'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20 } from 'hooks/useContract'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  userCurrencyBalance: BigNumber\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst ContributeModal: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess,\n}) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency } = ifo\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\n  const { contract } = walletIfoData\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const raisingTokenContract = useERC20(getAddress(currency.address))\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await raisingTokenContract.allowance(account, contract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, { gasPrice })\n      },\n      onConfirm: () => {\n        return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\n          gasPrice,\n        })\n      },\n      onSuccess: async () => {\n        await onSuccess(valueWithTokenDecimals)\n        onDismiss()\n      },\n    })\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\n        ? limitPerUserInLP\n        : userCurrencyBalance\n    }\n    return userCurrencyBalance\n  })()\n\n  return (\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"320px\">\n        {limitPerUserInLP.isGreaterThan(0) && (\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            <Text>{t('Max. LP token entry')}</Text>\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Commit')}:</Text>\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\n            <Image\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\n              width={24}\n              height={24}\n            />\n            <Text>{currency.symbol}</Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\n          onUserInput={setValue}\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\n          decimals={currency.decimals}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: %balance%', {\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\n          })}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you don’t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\n          )}\n        </Text>\n        <ApproveConfirmButtons\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\n          isApproving={isApproving}\n          isConfirmDisabled={\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\n          }\n          isConfirming={isConfirming}\n          onApprove={handleApprove}\n          onConfirm={handleConfirm}\n        />\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal title={t('LP Tokens required')} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n        <Image\n          src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\n          width={72}\n          height={72}\n          margin=\"auto\"\n          mb=\"24px\"\n        />\n        <Text mb=\"16px\">{t('You’ll need CAKE-BNB LP tokens to participate in the IFO!')}</Text>\n        <Text mb=\"24px\">{t('Get LP tokens, or make sure your tokens aren’t staked somewhere else.')}</Text>\n        <Button\n          as={Link}\n          external\n          href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82`}\n          endIcon={<OpenNewIcon color=\"white\" />}\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\n        >\n          {t('Get LP tokens')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetLpModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport ContributeModal from './ContributeModal'\nimport GetLpModal from './GetLpModal'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(ifo.currency.address))\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\n    toastSuccess(\n      t('Success!'),\n      t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!', { amount: getBalanceNumber(amount) }),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      poolId={poolId}\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      onSuccess={handleContributeSuccess}\n      userCurrencyBalance={userCurrencyBalance}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={ifo.currency} />, false)\n\n  const isDisabled =\n    isPendingTx ||\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\n\n  return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n      disabled={isDisabled}\n    >\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\n    </Button>\n  )\n}\n\nexport default ContributeButton\n","import React from 'react'\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  poolId: PoolIds\n  ifoVersion: number\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest()\n        await tx.wait()\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\n        await tx.wait()\n      }\n\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'))\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n}\n\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  if (isLoading) {\n    return <SkeletonCardActions />\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  if (!hasProfile) {\n    return (\n      <Button as={Link} to=\"/profile\" width=\"100%\">\n        {t('Activate your Profile')}\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {publicIfoData.status === 'live' && (\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n      )}\n      {publicIfoData.status === 'finished' &&\n        !userPoolCharacteristics.hasClaimed &&\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\n        )}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React from 'react'\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\nimport { PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, currencyPriceInUSD } = publicIfoData\n  const poolCharacteristic = publicIfoData[poolId]\n\n  /* Format start */\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\n  const taxRate = `${poolCharacteristic.taxRate}%`\n\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\n    .div(poolCharacteristic.raisingAmountPool)\n    .times(100)\n    .toFixed(2)\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\n\n  /* Format end */\n\n  const renderBasedOnIfoStatus = () => {\n    if (status === 'coming_soon') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n            value={`$${ifo.tokenOfferingPrice}`}\n          />\n        </>\n      )\n    }\n    if (status === 'live') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n        </>\n      )\n    }\n    if (status === 'finished') {\n      return (\n        <>\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\n          <FooterEntry\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\n          />\n        </>\n      )\n    }\n    return <SkeletonCardDetails />\n  }\n\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@pancakeswap/uikit'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\ninterface IfoCardProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\ninterface CardConfig {\n  [key: string]: {\n    title: string\n    variant: 'blue' | 'violet'\n    tooltip: string\n  }\n}\n\nconst cardConfig: CardConfig = {\n  [PoolIds.poolBasic]: {\n    title: 'Basic Sale',\n    variant: 'blue',\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n  },\n  [PoolIds.poolUnlimited]: {\n    title: 'Unlimited Sale',\n    variant: 'violet',\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\n  },\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\n  const { t } = useTranslation()\n  const config = cardConfig[poolId]\n  const { hasProfile, isLoading: isProfileLoading } = useProfile()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t(config.tooltip), { placement: 'bottom' })\n\n  const isLoading = isProfileLoading || publicIfoData.status === 'idle'\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <Card>\n        <CardHeader variant={config.variant}>\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text bold fontSize=\"20px\">\n              {t(config.title)}\n            </Text>\n            <div ref={targetRef}>\n              <HelpIcon />\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <IfoCardTokens\n            poolId={poolId}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            hasProfile={hasProfile}\n            isLoading={isLoading}\n            onApprove={onApprove}\n            enableStatus={enableStatus}\n          />\n          <IfoCardActions\n            poolId={poolId}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            hasProfile={hasProfile}\n            isLoading={isLoading}\n          />\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} />\n        </CardBody>\n      </Card>\n    </>\n  )\n}\n\nexport default SmallCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData } from 'views/Ifos/types'\n\ninterface Props {\n  publicIfoData: PublicIfoData\n}\n\nconst Timer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, secondsUntilStart, secondsUntilEnd, startBlockNum } = publicIfoData\n  const countdownToUse = status === 'coming_soon' ? secondsUntilStart : secondsUntilEnd\n  const timeUntil = getTimePeriods(countdownToUse)\n  const suffix = status === 'coming_soon' ? t('Start').toLowerCase() : t('Finish').toLowerCase()\n  return (\n    <Flex justifyContent=\"center\" mb=\"32px\">\n      {status === 'idle' ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <PocketWatchIcon width=\"48px\" mr=\"16px\" />\n          <Flex alignItems=\"center\">\n            <Text bold mr=\"16px\">\n              {suffix}:\n            </Text>\n            <Text>\n              {t('%day%d %hour%h %minute%m', {\n                day: timeUntil.days,\n                hour: timeUntil.hours,\n                minute: timeUntil.minutes,\n              })}\n            </Text>\n            <Link\n              href={getBscScanLink(startBlockNum, 'countdown')}\n              target=\"blank\"\n              rel=\"noopener noreferrer\"\n              ml=\"8px\"\n              textTransform=\"lowercase\"\n            >\n              {`(${t('Blocks')})`}\n            </Link>\n          </Flex>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default Timer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, LinkExternal, Image, Text, PrizeIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { PublicIfoData } from 'views/Ifos/types'\nimport { Ifo } from 'config/constants/types'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getBscScanLink } from 'utils'\n\nconst MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\n\ninterface Props {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nconst Container = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    align-items: initial;\n  }\n`\n\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  margin-top: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n  }\n`\n\nconst Achievement: React.FC<Props> = ({ ifo, publicIfoData }) => {\n  const { t } = useTranslation()\n  const tokenName = ifo.token.symbol.toLowerCase()\n  const campaignTitle = ifo.name\n  const minLpForAchievement = MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber()\n\n  return (\n    <Container>\n      <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"center\" flexGrow={1}>\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\n        <Flex flexDirection=\"column\">\n          <Text color=\"secondary\" fontSize=\"12px\">\n            {`${t('Achievement')}:`}\n          </Text>\n          <Flex>\n            <Text bold mr=\"8px\">\n              {t('IFO Shopper: %title%', { title: campaignTitle })}\n            </Text>\n            <Flex alignItems=\"center\" mr=\"8px\">\n              <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\n              <Text color=\"textSubtle\">{publicIfoData.numberPoints}</Text>\n            </Flex>\n          </Flex>\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('Commit ~%amount% LP in total to earn!', { amount: minLpForAchievement.toFixed(3) })}\n            </Text>\n          ) : (\n            <Skeleton minHeight={18} width={80} />\n          )}\n        </Flex>\n      </AchievementFlex>\n      <Flex alignItems=\"flex-end\" flexDirection=\"column\">\n        <StyledLinkExternal href={ifo.articleUrl} mb=\"8px\">\n          {t('Learn more about %title%', { title: campaignTitle })}\n        </StyledLinkExternal>\n        <StyledLinkExternal href={getBscScanLink(ifo.address, 'address')}>{t('View Contract')}</StyledLinkExternal>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Achievement\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\n\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.approve(spenderAddress, ethers.constants.MaxUint256)\n    await tx.wait()\n  }, [spenderAddress, tokenContract])\n\n  return onApprove\n}\n\nexport default useIfoApprove\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardRibbon,\n  ExpandableButton,\n  Progress,\n  Button,\n  ChevronUpIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { EnableStatus } from './types'\nimport IfoPoolCard from './IfoPoolCard'\nimport Timer from './Timer'\nimport Achievement from './Achievement'\nimport useIfoApprove from '../../hooks/useIfoApprove'\n\ninterface IfoFoldableCardProps {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  isInitiallyVisible: boolean\n}\n\nconst getRibbonComponent = (ifo: Ifo, status: IfoStatus, t: any) => {\n  if (status === 'coming_soon') {\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t('Coming Soon')} />\n  }\n\n  if (status === 'live' || (status === 'finished' && ifo.isActive)) {\n    return (\n      <CardRibbon\n        variantColor=\"primary\"\n        ribbonPosition=\"left\"\n        style={{ textTransform: 'uppercase' }}\n        text={status === 'live' ? `${t('Live')}!` : `${t('Finished')}!`}\n      />\n    )\n  }\n\n  return null\n}\n\nconst StyledCard = styled(Card)`\n  max-width: 736px;\n  width: 100%;\n  margin: auto;\n`\n\nconst Header = styled(CardHeader)<{ ifoId: string }>`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 112px;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg')`};\n`\n\nconst FoldableContent = styled.div<{ isVisible: boolean; isActive: boolean }>`\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 24px 16px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 24px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  text-align: center;\n  padding: 8px;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData, isInitiallyVisible }) => {\n  const [isVisible, setIsVisible] = useState(isInitiallyVisible)\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const raisingTokenContract = useERC20(getAddress(ifo.currency.address))\n  const Ribbon = getRibbonComponent(ifo, publicIfoData.status, t)\n  const isActive = publicIfoData.status !== 'finished' && ifo.isActive\n  const { contract } = walletIfoData\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\n  const { toastSuccess } = useToast()\n\n  const handleApprove = async () => {\n    try {\n      setEnableStatus(EnableStatus.IS_ENABLING)\n\n      await onApprove()\n\n      setEnableStatus(EnableStatus.ENABLED)\n      toastSuccess(\n        t('Successfully Enabled!'),\n        t('You can now participate in the %symbol% IFO.', { symbol: ifo.token.symbol }),\n      )\n    } catch (error) {\n      setEnableStatus(EnableStatus.DISABLED)\n    }\n  }\n\n  useEffect(() => {\n    const checkAllowance = async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address)\n        const currentAllowance = new BigNumber(response.toString())\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\n      } catch (error) {\n        setEnableStatus(EnableStatus.DISABLED)\n      }\n    }\n\n    if (account) {\n      checkAllowance()\n    }\n  }, [account, raisingTokenContract, contract, setEnableStatus])\n\n  return (\n    <StyledCard ribbon={Ribbon}>\n      <Header ifoId={ifo.id}>\n        <ExpandableButton expanded={isVisible} onClick={() => setIsVisible((prev) => !prev)} />\n      </Header>\n      <FoldableContent isVisible={isVisible} isActive={publicIfoData.status !== 'idle' && isActive}>\n        {isActive && <Progress variant=\"flat\" primaryStep={publicIfoData.progress} />}\n        <StyledCardBody>\n          {isActive && <Timer publicIfoData={publicIfoData} />}\n          <CardsWrapper singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\n            {publicIfoData.poolBasic && walletIfoData.poolBasic && (\n              <IfoPoolCard\n                poolId={PoolIds.poolBasic}\n                ifo={ifo}\n                publicIfoData={publicIfoData}\n                walletIfoData={walletIfoData}\n                onApprove={handleApprove}\n                enableStatus={enableStatus}\n              />\n            )}\n            <IfoPoolCard\n              poolId={PoolIds.poolUnlimited}\n              ifo={ifo}\n              publicIfoData={publicIfoData}\n              walletIfoData={walletIfoData}\n              onApprove={handleApprove}\n              enableStatus={enableStatus}\n            />\n          </CardsWrapper>\n          <Achievement ifo={ifo} publicIfoData={publicIfoData} />\n        </StyledCardBody>\n        <StyledCardFooter>\n          <Button variant=\"text\" endIcon={<ChevronUpIcon color=\"primary\" />} onClick={() => setIsVisible(false)}>\n            {t('Close')}\n          </Button>\n        </StyledCardFooter>\n      </FoldableContent>\n    </StyledCard>\n  )\n}\n\nexport default IfoFoldableCard\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  padding: 40px 0;\n  border-top: 2px solid ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport default IfoLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport every from 'lodash/every'\nimport { Stepper, Step, StepStatus, Card, CardBody, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Ifo } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport Container from 'components/Layout/Container'\nimport { useProfile } from 'state/profile/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface Props {\n  ifo: Ifo\n  walletIfoData: WalletIfoData\n}\n\nconst Wrapper = styled(Container)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  margin-left: -16px;\n  margin-right: -16px;\n  padding-top: 48px;\n  padding-bottom: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: -24px;\n    margin-right: -24px;\n  }\n`\n\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData }) => {\n  const { poolBasic, poolUnlimited } = walletIfoData\n  const { hasProfile } = useProfile()\n  const { t } = useTranslation()\n  const { balance } = useTokenBalance(getAddress(ifo.currency.address))\n  const stepsValidationStatus = [\n    hasProfile,\n    balance.isGreaterThan(0),\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0),\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\n  ]\n\n  const getStatusProp = (index: number): StepStatus => {\n    const arePreviousValid = index === 0 ? true : every(stepsValidationStatus.slice(0, index), Boolean)\n    if (stepsValidationStatus[index]) {\n      return arePreviousValid ? 'past' : 'future'\n    }\n    return arePreviousValid ? 'current' : 'future'\n  }\n\n  const renderCardBody = (step: number) => {\n    const isStepValid = stepsValidationStatus[step]\n    switch (step) {\n      case 0:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Activate your Profile')}\n            </Heading>\n            <Text color=\"textSubtle\" small mb=\"16px\">\n              {t('You’ll need an active PancakeSwap Profile to take part in an IFO!')}\n            </Text>\n            {isStepValid ? (\n              <Text color=\"success\" bold>\n                {t('Profile Active!')}\n              </Text>\n            ) : (\n              <Button as={Link} href=\"/profile\">\n                {t('Activate your Profile')}\n              </Button>\n            )}\n          </CardBody>\n        )\n      case 1:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Get CAKE-BNB LP Tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t('Stake CAKE and BNB in the liquidity pool to get LP tokens.')} <br />\n              {t('You’ll spend them to buy IFO sale tokens.')}\n            </Text>\n            <Button\n              as={Link}\n              external\n              href={`${BASE_ADD_LIQUIDITY_URL}/BNB/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82`}\n              endIcon={<OpenNewIcon color=\"white\" />}\n              mt=\"16px\"\n            >\n              {t('Get LP tokens')}\n            </Button>\n          </CardBody>\n        )\n      case 2:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Commit LP Tokens')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t('When the IFO sales are live, you can “commit” your LP tokens to buy the tokens being sold.')} <br />\n              {t('We recommend committing to the Basic Sale first, but you can do both if you like.')}\n            </Text>\n          </CardBody>\n        )\n      case 3:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Claim your tokens and achievement')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t(\n                'After the IFO sales finish, you can claim any IFO tokens that you bought, and any unspent CAKE-BNB LP tokens will be returned to your wallet.',\n              )}\n            </Text>\n          </CardBody>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Heading as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\">\n        {t('How to Take Part')}\n      </Heading>\n      <Stepper>\n        {stepsValidationStatus.map((_, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Step key={index} index={index} status={getStatusProp(index)}>\n            <Card>{renderCardBody(index)}</Card>\n          </Step>\n        ))}\n      </Stepper>\n    </Wrapper>\n  )\n}\n\nexport default IfoSteps\n","const config = [\n  {\n    title: 'What’s the difference between a Basic Sale and Unlimited Sale?',\n    description: [\n      'In the Basic Sale, every user can commit a maximum of about 100 USD worth of CAKE-BNB LP Tokens. We calculate the maximum LP amount about 30 minutes before each IFO. The Basic Sale has no participation fee.',\n      'In the Unlimited Sale, there’s no limit to the amount of CAKE-BNB LP Tokens you can commit. However, there’s a fee for participation: see below.',\n    ],\n  },\n  {\n    title: 'Which sale should I commit to? Can I do both?',\n    description: [\n      'You can choose one or both at the same time! If you’re only committing a small amount, we recommend the Basic Sale first. Just remember you need a PancakeSwap Profile in order to participate.',\n    ],\n  },\n  {\n    title: 'How much is the participation fee?',\n    description: [\n      'There’s only a participation fee for the Unlimited Sale: there’s no fee for the Basic Sale.',\n      'The fee will start at 1%.',\n      'The 1% participation fee decreases in cliffs, based on the percentage of overflow from the “Unlimited” portion of the sale.',\n    ],\n  },\n  {\n    title: 'Where does the participation fee go?',\n    description: [\n      'We burn it. The CAKE-BNB LP tokens from the participation fee will be decomposed. We will then use the BNB portion to market buy the CAKE equivalent, and finally throw all of the CAKE into the weekly token burn.',\n    ],\n  },\n  {\n    title: 'How can I get an achievement for participating in the IFO?',\n    description: [\n      'You need to contribute a minimum of about 10 USD worth of CAKE-BNB LP Tokens to either sale.',\n      'You can contribute to one or both, it doesn’t matter: only your overall contribution is counted for the achievement.',\n    ],\n  },\n]\nexport default config\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Card, CardHeader, CardBody, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport FoldableText from 'components/FoldableText'\nimport config from './config'\n\nconst ImageWrapper = styled.div`\n  flex: none;\n  order: 2;\n  max-width: 414px;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 1;\n  }\n`\n\nconst DetailsWrapper = styled.div`\n  order: 1;\n  margin-bottom: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 2;\n    margin-bottom: 0;\n    margin-left: 40px;\n  }\n`\n\nconst IfoQuestions = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems={['center', null, null, 'start']} flexDirection={['column', null, null, 'row']}>\n      <ImageWrapper>\n        <img src=\"/images/ifos/ifo-bunny.png\" alt=\"ifo bunny\" width=\"414px\" height=\"500px\" />\n      </ImageWrapper>\n      <DetailsWrapper>\n        <Card>\n          <CardHeader>\n            <Heading scale=\"lg\" color=\"secondary\">\n              {t('Details')}\n            </Heading>\n          </CardHeader>\n          <CardBody>\n            {config.map(({ title, description }, i, { length }) => (\n              <FoldableText key={title} id={title} mb={i + 1 === length ? '' : '24px'} title={t(title)}>\n                {description.map((desc) => {\n                  return (\n                    <Text key={desc} color=\"textSubtle\" as=\"p\">\n                      {t(desc)}\n                    </Text>\n                  )\n                })}\n              </FoldableText>\n            ))}\n          </CardBody>\n        </Card>\n      </DetailsWrapper>\n    </Flex>\n  )\n}\n\nexport default IfoQuestions\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport IfoSteps from './components/IfoSteps'\nimport IfoQuestions from './components/IfoQuestions'\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\n  const walletIfoData = useGetWalletIfoV2Data(activeIfo)\n\n  return (\n    <IfoLayout>\n      <IfoFoldableCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible />\n      <IfoSteps ifo={activeIfo} walletIfoData={walletIfoData} />\n      <IfoQuestions />\n    </IfoLayout>\n  )\n}\n\nexport default Ifo\n","import React from 'react'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n  isInitiallyVisible: boolean\n}\n\nconst IfoCardV2Data: React.FC<Props> = ({ ifo, isInitiallyVisible }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\n\n  return (\n    <IfoFoldableCard\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      isInitiallyVisible={isInitiallyVisible}\n    />\n  )\n}\n\nexport default IfoCardV2Data\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO, // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\n      address,\n      name: method,\n      params: [account],\n    }))\n\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n    const parsedUserInfo: UserInfo = userInfoResponse\n      ? {\n          amount: new BigNumber(userInfoResponse.amount.toString()),\n          claimed: userInfoResponse.claimed,\n        }\n      : { amount: BIG_ZERO, claimed: false }\n\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\n\n  return (\n    <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} isInitiallyVisible={false} />\n  )\n}\n\nexport default IfoCardV1Data\n","import React from 'react'\nimport { ifosConfig } from 'config/constants'\nimport { Ifo } from 'config/constants/types'\nimport IfoCardV2Data from './components/IfoCardV2Data'\nimport IfoCardV1Data from './components/IfoCardV1Data'\nimport IfoLayout from './components/IfoLayout'\n\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\n\nconst PastIfo = () => {\n  return (\n    <IfoLayout>\n      {inactiveIfo.map((ifo) =>\n        ifo.version === 1 ? (\n          <IfoCardV1Data key={ifo.id} ifo={ifo} />\n        ) : (\n          <IfoCardV2Data key={ifo.id} ifo={ifo} isInitiallyVisible={false} />\n        ),\n      )}\n    </IfoLayout>\n  )\n}\n\nexport default PastIfo\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n\n  return (\n    <>\n      <Hero />\n      <Container>\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"32px\">\n          <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem as={Link} to={`${url}`}>\n              {t('Next IFO')}\n            </ButtonMenuItem>\n            <ButtonMenuItem as={Link} to={`${url}/history`}>\n              {t('Past IFOs')}\n            </ButtonMenuItem>\n          </ButtonMenu>\n        </Flex>\n        <Route exact path={`${path}`}>\n          <CurrentIfo />\n        </Route>\n        <Route path={`${path}/history`}>\n          <PastIfo />\n        </Route>\n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n"],"sourceRoot":""}