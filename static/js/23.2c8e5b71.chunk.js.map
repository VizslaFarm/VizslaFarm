{"version":3,"sources":["views/PoolFinder5/index.tsx","components/Links/index.tsx","components/App/Settings/SettingsModal5.tsx","components/App/Settings/index5.tsx","components/App/Transactions5/Transaction.tsx","components/App/Transactions5/TransactionsModal.tsx","components/App/Transactions5/index.tsx","components/App/AppHeader5.tsx"],"names":["Fields","StyledButton","styled","Button","theme","colors","input","text","PoolFinder5","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","selectedCurrency","onPresentCurrencyModal","component","mb","variant","endIcon","src","alt","height","width","to","as","Link","color","title","subtitle","backTo","style","gap","onClick","ml","symbol","Row","justifyItems","backgroundColor","borderRadius","justify","currencyId","INVALID","fontWeight","LOADING","StyledInternalLink","primary","SettingsModal","onDismiss","showConfirmExpertModal","setShowConfirmExpertModal","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useUserTransactionTTL","ttl","setTtl","useExpertModeManager","expertMode","toggleExpertMode","useUserSingleHopOnly","singleHopOnly","setSingleHopOnly","useAudioModeManager","onChangeRecipient","useSwapActionHandlers","onBack","maxWidth","id","window","prompt","bold","fontSize","TransactionSettings","rawSlippage","setRawSlippage","deadline","setDeadline","mt","QuestionHelper","checked","onChange","SettingsTab","onPresentSettingsModal","show","p","TransactionState","div","IconWrapper","pending","success","failure","Transaction","tx","chainId","summary","receipt","status","href","getBscScanLink","hash","CircleLoader","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","flexDirection","map","TransactionsModal","dispatch","useDispatch","allTransactions","useAllTransactions","sortedRecentTransactions","useMemo","Object","values","filter","isTransactionRecent","sort","confirmed","clearAllTransactionsCallback","clearAllTransactions","length","justifyContent","scale","Transactions","onPresentTransactionsModal","AppHeaderContainer","Flex","cardBorder","AppHeader","helper","noConfig","alignItems","mr"],"mappings":"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","file":"static/js/23.2c8e5b71.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap2/sdk/dist/dist/dist5'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal ,SubMenuItem, SubMenu, Image } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo/index5'\nimport { MinimalPositionCard } from '../../components/PositionCard5'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal5'\nimport { PairState, usePair } from '../../hooks/usePairs5'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { usePairAdder } from '../../state/user/hooks/index5'\nimport { useTokenBalance } from '../../state/wallet/hooks5'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId5'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App/index5'\nimport Page from '../Page5'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder5() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n                <SubMenu  component={<Button mb=\"15px\" variant=\"tertiary\"  endIcon={<ChevronDownIcon/>}  >     \n      <img src=\"/images/routers/5.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n      <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n\n         Biswap</Button>}>     \n            <SubMenuItem   to=\"/apefind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/2.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('ApeSwap')}\n            </SubMenuItem>\n            <SubMenuItem  to=\"/find\" as={Link} color=\"text\">\n            <img src=\"/images/routers/1.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('PancakeSwap')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/radiofind\" as={Link} color=\"text\">\n            <img src=\"/images/routers/4.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('RadioShack')}\n            </SubMenuItem>\n        </SubMenu>\n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool5\" />\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool5\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/addbiswapliquidity/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/addbiswapliquidity/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n","import React, { useState } from 'react'\nimport { Button, Text, PancakeToggle, Flex, Message, Modal, ModalBody, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from 'state/user/hooks/index5'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useSwapActionHandlers } from 'state/swap/hooks5'\nimport { AutoColumn } from '../../Layout/Column'\nimport QuestionHelper from '../../QuestionHelper'\nimport { RowBetween, RowFixed } from '../../Layout/Row'\nimport TransactionSettings from './TransactionSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n  const [ttl, setTtl] = useUserTransactionTTL()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n\n  if (showConfirmExpertModal) {\n    return (\n      <Modal\n        title={t('Are you sure?')}\n        onBack={() => setShowConfirmExpertModal(false)}\n        onDismiss={onDismiss}\n        style={{ maxWidth: '420px' }}\n      >\n        <ModalBody>\n          <Message variant=\"warning\" mb=\"24px\">\n            <Text>\n              {t(\n                \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\n              )}\n            </Text>\n          </Message>\n          <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\n          <Button\n            variant=\"danger\"\n            id=\"confirm-expert-mode\"\n            onClick={() => {\n              // eslint-disable-next-line no-alert\n              if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                toggleExpertMode()\n                setShowConfirmExpertModal(false)\n              }\n            }}\n          >\n            {t('Turn On Expert Mode')}\n          </Button>\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal title={t('Settings')}  onDismiss={onDismiss}>\n      <ModalBody>\n        <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n          <Text bold fontSize=\"20px\">\n            {t('Transaction Settings')}\n          </Text>\n          <TransactionSettings\n            rawSlippage={userSlippageTolerance}\n            setRawSlippage={setUserslippageTolerance}\n            deadline={ttl}\n            setDeadline={setTtl}\n          />\n          <Text bold fontSize=\"20px\" mt=\"32px\">\n            {t('Interface Settings')}\n          </Text>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Toggle Expert Mode')}</Text>\n              <QuestionHelper\n                text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n                ml=\"4px\"\n              />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-expert-mode-button\"\n              checked={expertMode}\n              onChange={\n                expertMode\n                  ? () => {\n                      onChangeRecipient(null)\n                      toggleExpertMode()\n                    }\n                  : () => setShowConfirmExpertModal(true)\n              }\n            />\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Disable Multihops')}</Text>\n              <QuestionHelper text={t('Restricts swaps to direct pairs only.')} ml=\"4px\" />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-disable-multihop-button\"\n              checked={singleHopOnly}\n              onChange={() => {\n                setSingleHopOnly(!singleHopOnly)\n              }}\n            />\n          </RowBetween>\n        </AutoColumn>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Button, TuneIcon, NotificationDot, useModal } from '@pancakeswap/uikit'\nimport { useExpertModeManager } from 'state/user/hooks/index5'\nimport SettingsModal from './SettingsModal5'\n\nexport default function SettingsTab() {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n  const [expertMode] = useExpertModeManager()\n\n  return (\n    <NotificationDot show={expertMode}>\n      <Button variant=\"text\" p={0} onClick={onPresentSettingsModal} id=\"open-settings-dialog-button\">\n        <TuneIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </NotificationDot>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkIcon, CloseIcon, LinkExternal } from '@pancakeswap/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils/index4'\nimport { TransactionDetails } from 'state/transactions/reducer4'\nimport CircleLoader from '../../Loader/CircleLoader'\n\nconst TransactionState = styled.div<{ pending: boolean; success?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-decoration: none !important;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0rem;\n  font-weight: 500;\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst IconWrapper = styled.div<{ pending: boolean; success?: boolean }>`\n  color: ${({ pending, success, theme }) =>\n    pending ? theme.colors.primary : success ? theme.colors.success : theme.colors.failure};\n`\n\nexport default function Transaction({ tx }: { tx: TransactionDetails }) {\n  const { chainId } = useActiveWeb3React()\n\n  const summary = tx?.summary\n  const pending = !tx?.receipt\n  const success = !pending && tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n\n  if (!chainId) return null\n\n  return (\n    <TransactionState pending={pending} success={success}>\n      <LinkExternal href={getBscScanLink(tx.hash, 'transaction', chainId)}>{summary ?? tx.hash}</LinkExternal>\n      <IconWrapper pending={pending} success={success}>\n        {pending ? <CircleLoader /> : success ? <CheckmarkIcon color=\"success\" /> : <CloseIcon color=\"failure\" />}\n      </IconWrapper>\n    </TransactionState>\n  )\n}\n","import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks5'\nimport { TransactionDetails } from 'state/transactions/reducer5'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions5'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')}  onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n","import React from 'react'\nimport { HistoryIcon, Button, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from './TransactionsModal'\n\nconst Transactions = () => {\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  return (\n    <>\n      <Button variant=\"text\" p={0} onClick={onPresentTransactionsModal} ml=\"16px\">\n        <HistoryIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </>\n  )\n}\n\nexport default Transactions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, IconButton, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport Settings from './Settings/index5'\nimport Transactions from './Transactions5'\nimport QuestionHelper from '../QuestionHelper'\n\ninterface Props {\n  title: string\n  subtitle: string\n  helper?: string\n  backTo?: string\n  noConfig?: boolean\n}\n\nconst AppHeaderContainer = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AppHeader: React.FC<Props> = ({ title, subtitle, helper, backTo, noConfig = false }) => {\n  return (\n    <AppHeaderContainer>\n      <Flex alignItems=\"center\" mr={noConfig ? 0 : '16px'}>\n        {backTo && (\n          <IconButton as={Link} to={backTo}>\n            <ArrowBackIcon width=\"32px\" />\n          </IconButton>\n        )}\n        <Flex flexDirection=\"column\">\n          <Heading as=\"h2\" mb=\"8px\">\n            {title}\n          </Heading>\n          <Flex alignItems=\"center\">\n            {helper && <QuestionHelper text={helper} mr=\"4px\" />}\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {subtitle}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      {!noConfig && (\n        <Flex>\n          <Settings />\n          <Transactions />\n        </Flex>\n      )}\n    </AppHeaderContainer>\n  )\n}\n\nexport default AppHeader\n"],"sourceRoot":""}