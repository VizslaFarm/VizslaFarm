{"version":3,"sources":["views/Pool2/index.tsx","components/App/Settings/SettingsModal3.tsx","components/App/Settings/index3.tsx","components/App/Transactions3/Transaction.tsx","components/App/Transactions3/TransactionsModal.tsx","components/App/Transactions3/index.tsx","components/App/AppHeader3.tsx"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","StyledNav","nav","Pool2","pathname","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","color","textAlign","index","pair","mb","flexDirection","alignItems","mt","id","variant","scale","as","Link","to","style","width","startIcon","activeIndex","location","includes","SettingsModal","onDismiss","useState","showConfirmExpertModal","setShowConfirmExpertModal","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useUserTransactionTTL","ttl","setTtl","useExpertModeManager","expertMode","toggleExpertMode","useUserSingleHopOnly","singleHopOnly","setSingleHopOnly","useAudioModeManager","onChangeRecipient","useSwapActionHandlers","onBack","maxWidth","onClick","window","prompt","gap","padding","bold","fontSize","TransactionSettings","rawSlippage","setRawSlippage","deadline","setDeadline","Row","QuestionHelper","text","ml","checked","onChange","SettingsTab","useModal","onPresentSettingsModal","show","p","TransactionState","div","primary","IconWrapper","pending","success","failure","Transaction","tx","chainId","summary","receipt","status","href","getBscScanLink","hash","CircleLoader","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","TransactionsModal","dispatch","useDispatch","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","isTransactionRecent","sort","confirmed","clearAllTransactionsCallback","useCallback","clearAllTransactions","justifyContent","Transactions","onPresentTransactionsModal","AppHeaderContainer","Flex","cardBorder","AppHeader","helper","backTo","noConfig","mr"],"mappings":"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","file":"static/js/22.5f8792cd.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap2/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon , ButtonMenu, ButtonMenuItem} from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport FullPositionCard from '../../components/PositionCard3'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks3'\nimport { usePairs } from '../../hooks/usePairs3'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks/index3'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App/index3'\nimport Page from '../Page2'\n\nconst Body = styled(CardBody)`\n  background-color: ${({ theme }) => theme.colors.dropdownDeep};\n`\nconst StyledNav = styled.nav`\n  margin-top: 40px;\n`\n\nexport default function Pool2() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n  const getActiveIndex = (pathname: string): number => {\n    if (\n      pathname.includes('/pool2') ||\n      pathname.includes('/createape') ||\n      pathname.includes('/addapeliquidity') ||\n      pathname.includes('/removeape') ||\n      pathname.includes('/apefind') ||\n      pathname.includes('/apeliquidity')\n    ) {\n      return 1\n    }\n    return 0\n  }\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/apefind\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/addapeliquidity\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n      <StyledNav>\n      <ButtonMenu activeIndex={getActiveIndex(location.pathname)} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem id=\"swap-nav-link\" to=\"/liquidity\" as={Link}>\n          {t('PancakeSwap')}\n        </ButtonMenuItem>\n        <ButtonMenuItem id=\"pool-nav-link\" to=\"/apeliquidity\" as={Link}>\n          {t('ApeSwap')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n      </StyledNav>\n    </Page>\n    \n  )\n}\n","import React, { useState } from 'react'\nimport { Button, Text, PancakeToggle, Flex, Message, Modal, ModalBody, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from 'state/user/hooks/index3'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useSwapActionHandlers } from 'state/swap/hooks3'\nimport { AutoColumn } from '../../Layout/Column'\nimport QuestionHelper from '../../QuestionHelper'\nimport { RowBetween, RowFixed } from '../../Layout/Row'\nimport TransactionSettings from './TransactionSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n  const [ttl, setTtl] = useUserTransactionTTL()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n\n  if (showConfirmExpertModal) {\n    return (\n      <Modal\n        title={t('Are you sure?')}\n        onBack={() => setShowConfirmExpertModal(false)}\n        onDismiss={onDismiss}\n        style={{ maxWidth: '420px' }}\n      >\n        <ModalBody>\n          <Message variant=\"warning\" mb=\"24px\">\n            <Text>\n              {t(\n                \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\n              )}\n            </Text>\n          </Message>\n          <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\n          <Button\n            variant=\"danger\"\n            id=\"confirm-expert-mode\"\n            onClick={() => {\n              // eslint-disable-next-line no-alert\n              if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                toggleExpertMode()\n                setShowConfirmExpertModal(false)\n              }\n            }}\n          >\n            {t('Turn On Expert Mode')}\n          </Button>\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal title={t('Settings')}  onDismiss={onDismiss}>\n      <ModalBody>\n        <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n          <Text bold fontSize=\"20px\">\n            {t('Transaction Settings')}\n          </Text>\n          <TransactionSettings\n            rawSlippage={userSlippageTolerance}\n            setRawSlippage={setUserslippageTolerance}\n            deadline={ttl}\n            setDeadline={setTtl}\n          />\n          <Text bold fontSize=\"20px\" mt=\"32px\">\n            {t('Interface Settings')}\n          </Text>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Toggle Expert Mode')}</Text>\n              <QuestionHelper\n                text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n                ml=\"4px\"\n              />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-expert-mode-button\"\n              checked={expertMode}\n              onChange={\n                expertMode\n                  ? () => {\n                      onChangeRecipient(null)\n                      toggleExpertMode()\n                    }\n                  : () => setShowConfirmExpertModal(true)\n              }\n            />\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Disable Multihops')}</Text>\n              <QuestionHelper text={t('Restricts swaps to direct pairs only.')} ml=\"4px\" />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-disable-multihop-button\"\n              checked={singleHopOnly}\n              onChange={() => {\n                setSingleHopOnly(!singleHopOnly)\n              }}\n            />\n          </RowBetween>\n        </AutoColumn>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Button, TuneIcon, NotificationDot, useModal } from '@pancakeswap/uikit'\nimport { useExpertModeManager } from 'state/user/hooks/index3'\nimport SettingsModal from './SettingsModal3'\n\nexport default function SettingsTab() {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n  const [expertMode] = useExpertModeManager()\n\n  return (\n    <NotificationDot show={expertMode}>\n      <Button variant=\"text\" p={0} onClick={onPresentSettingsModal} id=\"open-settings-dialog-button\">\n        <TuneIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </NotificationDot>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkIcon, CloseIcon, LinkExternal } from '@pancakeswap/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils/index3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport CircleLoader from '../../Loader/CircleLoader'\n\nconst TransactionState = styled.div<{ pending: boolean; success?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-decoration: none !important;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0rem;\n  font-weight: 500;\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst IconWrapper = styled.div<{ pending: boolean; success?: boolean }>`\n  color: ${({ pending, success, theme }) =>\n    pending ? theme.colors.primary : success ? theme.colors.success : theme.colors.failure};\n`\n\nexport default function Transaction({ tx }: { tx: TransactionDetails }) {\n  const { chainId } = useActiveWeb3React()\n\n  const summary = tx?.summary\n  const pending = !tx?.receipt\n  const success = !pending && tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n\n  if (!chainId) return null\n\n  return (\n    <TransactionState pending={pending} success={success}>\n      <LinkExternal href={getBscScanLink(tx.hash, 'transaction', chainId)}>{summary ?? tx.hash}</LinkExternal>\n      <IconWrapper pending={pending} success={success}>\n        {pending ? <CircleLoader /> : success ? <CheckmarkIcon color=\"success\" /> : <CloseIcon color=\"failure\" />}\n      </IconWrapper>\n    </TransactionState>\n  )\n}\n","import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions3'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')}  onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n","import React from 'react'\nimport { HistoryIcon, Button, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from './TransactionsModal'\n\nconst Transactions = () => {\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  return (\n    <>\n      <Button variant=\"text\" p={0} onClick={onPresentTransactionsModal} ml=\"16px\">\n        <HistoryIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </>\n  )\n}\n\nexport default Transactions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, IconButton, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport Settings from './Settings/index3'\nimport Transactions from './Transactions3'\nimport QuestionHelper from '../QuestionHelper'\n\ninterface Props {\n  title: string\n  subtitle: string\n  helper?: string\n  backTo?: string\n  noConfig?: boolean\n}\n\nconst AppHeaderContainer = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AppHeader: React.FC<Props> = ({ title, subtitle, helper, backTo, noConfig = false }) => {\n  return (\n    <AppHeaderContainer>\n      <Flex alignItems=\"center\" mr={noConfig ? 0 : '16px'}>\n        {backTo && (\n          <IconButton as={Link} to={backTo}>\n            <ArrowBackIcon width=\"32px\" />\n          </IconButton>\n        )}\n        <Flex flexDirection=\"column\">\n          <Heading as=\"h2\" mb=\"8px\">\n            {title}\n          </Heading>\n          <Flex alignItems=\"center\">\n            {helper && <QuestionHelper text={helper} mr=\"4px\" />}\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {subtitle}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      {!noConfig && (\n        <Flex>\n          <Settings />\n          <Transactions />\n        </Flex>\n      )}\n    </AppHeaderContainer>\n  )\n}\n\nexport default AppHeader\n"],"sourceRoot":""}