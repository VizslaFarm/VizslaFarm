{"version":3,"sources":["components/Links/index.tsx","views/PoolFinder/index.tsx"],"names":["StyledInternalLink","styled","Link","theme","colors","primary","Fields","StyledButton","Button","input","text","PoolFinder","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","selectedCurrency","onPresentCurrencyModal","title","subtitle","backTo","alignItems","justifyContent","component","mb","mt","variant","endIcon","src","alt","height","width","to","as","color","style","gap","onClick","ml","symbol","Row","justifyItems","backgroundColor","borderRadius","justify","currencyId","INVALID","fontWeight","LOADING"],"mappings":"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","file":"static/js/21.b6af86eb.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap/sdk'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal ,SubMenuItem, SubMenu, Flex , Image} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from '../../hooks/usePairs'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../PageL'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n        \n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\n        <Flex alignItems=\"center\" justifyContent=\"right\" >\n\n<SubMenu  component={<Button  mb=\"10px\" mt=\"10px\"  variant=\"tertiary\"  endIcon={<ChevronDownIcon/>}  >   \n      <img src=\"/images/routers/1.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n      <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n\n         PancakeSwap</Button>}>     \n            <SubMenuItem   to=\"/apefind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/2.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('ApeSwap')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/babydogefind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/6.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('BabyDoge')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/biswapfind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/5.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('Biswap')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/radiofind\" as={Link} color=\"text\">\n            <img src=\"/images/routers/4.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('RadioShack')}\n            </SubMenuItem>\n        </SubMenu>\n        </Flex>\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n      \n    </Page>\n  )\n}"],"sourceRoot":""}