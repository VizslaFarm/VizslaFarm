{"version":3,"sources":["components/App/Settings/SettingsModal3.tsx","components/App/Settings/index3.tsx","components/App/Transactions3/Transaction.tsx","components/App/Transactions3/TransactionsModal.tsx","components/App/Transactions3/index.tsx","components/App/AppHeader3.tsx","views/PoolFinder2/index.tsx","components/Links/index.tsx"],"names":["SettingsModal","onDismiss","useState","showConfirmExpertModal","setShowConfirmExpertModal","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useUserTransactionTTL","ttl","setTtl","useExpertModeManager","expertMode","toggleExpertMode","useUserSingleHopOnly","singleHopOnly","setSingleHopOnly","useAudioModeManager","onChangeRecipient","useSwapActionHandlers","t","useTranslation","title","onBack","style","maxWidth","variant","mb","id","onClick","window","prompt","gap","padding","bold","fontSize","TransactionSettings","rawSlippage","setRawSlippage","deadline","setDeadline","mt","Row","QuestionHelper","text","ml","checked","onChange","SettingsTab","useModal","onPresentSettingsModal","show","p","color","width","TransactionState","styled","div","theme","colors","primary","IconWrapper","pending","success","failure","Transaction","tx","chainId","useActiveWeb3React","summary","receipt","status","href","getBscScanLink","hash","CircleLoader","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","flexDirection","map","TransactionsModal","account","dispatch","useDispatch","allTransactions","useAllTransactions","sortedRecentTransactions","useMemo","Object","values","filter","isTransactionRecent","sort","confirmed","clearAllTransactionsCallback","useCallback","clearAllTransactions","length","justifyContent","scale","Transactions","onPresentTransactionsModal","AppHeaderContainer","Flex","cardBorder","AppHeader","subtitle","helper","backTo","noConfig","alignItems","mr","as","Link","to","Fields","StyledButton","Button","input","PoolFinder2","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","currency","TOKEN0","prerequisiteMessage","textAlign","onCurrencySelect","selectedCurrency","onPresentCurrencyModal","component","endIcon","src","alt","height","symbol","justifyItems","backgroundColor","borderRadius","justify","currencyId","INVALID","fontWeight","LOADING","StyledInternalLink"],"mappings":"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","file":"static/js/22.3d1008c2.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Button, Text, PancakeToggle, Flex, Message, Modal, ModalBody, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from 'state/user/hooks/index3'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useSwapActionHandlers } from 'state/swap/hooks3'\nimport { AutoColumn } from '../../Layout/Column'\nimport QuestionHelper from '../../QuestionHelper'\nimport { RowBetween, RowFixed } from '../../Layout/Row'\nimport TransactionSettings from './TransactionSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n  const [ttl, setTtl] = useUserTransactionTTL()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n\n  if (showConfirmExpertModal) {\n    return (\n      <Modal\n        title={t('Are you sure?')}\n        onBack={() => setShowConfirmExpertModal(false)}\n        onDismiss={onDismiss}\n        style={{ maxWidth: '420px' }}\n      >\n        <ModalBody>\n          <Message variant=\"warning\" mb=\"24px\">\n            <Text>\n              {t(\n                \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\n              )}\n            </Text>\n          </Message>\n          <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\n          <Button\n            variant=\"danger\"\n            id=\"confirm-expert-mode\"\n            onClick={() => {\n              // eslint-disable-next-line no-alert\n              if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                toggleExpertMode()\n                setShowConfirmExpertModal(false)\n              }\n            }}\n          >\n            {t('Turn On Expert Mode')}\n          </Button>\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal title={t('Settings')}  onDismiss={onDismiss}>\n      <ModalBody>\n        <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n          <Text bold fontSize=\"20px\">\n            {t('Transaction Settings')}\n          </Text>\n          <TransactionSettings\n            rawSlippage={userSlippageTolerance}\n            setRawSlippage={setUserslippageTolerance}\n            deadline={ttl}\n            setDeadline={setTtl}\n          />\n          <Text bold fontSize=\"20px\" mt=\"32px\">\n            {t('Interface Settings')}\n          </Text>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Toggle Expert Mode')}</Text>\n              <QuestionHelper\n                text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n                ml=\"4px\"\n              />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-expert-mode-button\"\n              checked={expertMode}\n              onChange={\n                expertMode\n                  ? () => {\n                      onChangeRecipient(null)\n                      toggleExpertMode()\n                    }\n                  : () => setShowConfirmExpertModal(true)\n              }\n            />\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Disable Multihops')}</Text>\n              <QuestionHelper text={t('Restricts swaps to direct pairs only.')} ml=\"4px\" />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-disable-multihop-button\"\n              checked={singleHopOnly}\n              onChange={() => {\n                setSingleHopOnly(!singleHopOnly)\n              }}\n            />\n          </RowBetween>\n        </AutoColumn>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Button, TuneIcon, NotificationDot, useModal } from '@pancakeswap/uikit'\nimport { useExpertModeManager } from 'state/user/hooks/index3'\nimport SettingsModal from './SettingsModal3'\n\nexport default function SettingsTab() {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n  const [expertMode] = useExpertModeManager()\n\n  return (\n    <NotificationDot show={expertMode}>\n      <Button variant=\"text\" p={0} onClick={onPresentSettingsModal} id=\"open-settings-dialog-button\">\n        <TuneIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </NotificationDot>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkIcon, CloseIcon, LinkExternal } from '@pancakeswap/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils/index3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport CircleLoader from '../../Loader/CircleLoader'\n\nconst TransactionState = styled.div<{ pending: boolean; success?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-decoration: none !important;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0rem;\n  font-weight: 500;\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst IconWrapper = styled.div<{ pending: boolean; success?: boolean }>`\n  color: ${({ pending, success, theme }) =>\n    pending ? theme.colors.primary : success ? theme.colors.success : theme.colors.failure};\n`\n\nexport default function Transaction({ tx }: { tx: TransactionDetails }) {\n  const { chainId } = useActiveWeb3React()\n\n  const summary = tx?.summary\n  const pending = !tx?.receipt\n  const success = !pending && tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n\n  if (!chainId) return null\n\n  return (\n    <TransactionState pending={pending} success={success}>\n      <LinkExternal href={getBscScanLink(tx.hash, 'transaction', chainId)}>{summary ?? tx.hash}</LinkExternal>\n      <IconWrapper pending={pending} success={success}>\n        {pending ? <CircleLoader /> : success ? <CheckmarkIcon color=\"success\" /> : <CloseIcon color=\"failure\" />}\n      </IconWrapper>\n    </TransactionState>\n  )\n}\n","import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks3'\nimport { TransactionDetails } from 'state/transactions/reducer3'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions3'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')}  onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n","import React from 'react'\nimport { HistoryIcon, Button, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from './TransactionsModal'\n\nconst Transactions = () => {\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  return (\n    <>\n      <Button variant=\"text\" p={0} onClick={onPresentTransactionsModal} ml=\"16px\">\n        <HistoryIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </>\n  )\n}\n\nexport default Transactions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, IconButton, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport Settings from './Settings/index3'\nimport Transactions from './Transactions3'\nimport QuestionHelper from '../QuestionHelper'\n\ninterface Props {\n  title: string\n  subtitle: string\n  helper?: string\n  backTo?: string\n  noConfig?: boolean\n}\n\nconst AppHeaderContainer = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AppHeader: React.FC<Props> = ({ title, subtitle, helper, backTo, noConfig = false }) => {\n  return (\n    <AppHeaderContainer>\n      <Flex alignItems=\"center\" mr={noConfig ? 0 : '16px'}>\n        {backTo && (\n          <IconButton as={Link} to={backTo}>\n            <ArrowBackIcon width=\"32px\" />\n          </IconButton>\n        )}\n        <Flex flexDirection=\"column\">\n          <Heading as=\"h2\" mb=\"8px\">\n            {title}\n          </Heading>\n          <Flex alignItems=\"center\">\n            {helper && <QuestionHelper text={helper} mr=\"4px\" />}\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {subtitle}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      {!noConfig && (\n        <Flex>\n          <Settings />\n          <Transactions />\n        </Flex>\n      )}\n    </AppHeaderContainer>\n  )\n}\n\nexport default AppHeader\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap2/sdk'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal ,SubMenuItem, SubMenu, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo/index2'\nimport { MinimalPositionCard } from '../../components/PositionCard3'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal3'\nimport { PairState, usePair } from '../../hooks/usePairs3'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { usePairAdder } from '../../state/user/hooks/index3'\nimport { useTokenBalance } from '../../state/wallet/hooks3'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId3'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App/index3'\nimport Page from '../Page2'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  box-shadow: none;\n  border-radius: 16px;\n`\n\nexport default function PoolFinder2() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n     \n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool2\" />\n        <Flex alignItems=\"center\" justifyContent=\"right\" >\n\n<SubMenu  component={<Button  mb=\"10px\" mt=\"10px\"  variant=\"tertiary\"  endIcon={<ChevronDownIcon/>}  >   \n      <img src=\"/images/routers/2.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n      <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n\n         ApeSwap</Button>}>  \n         <SubMenuItem   to=\"/babydogefind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/6.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('BabyDoge')}\n            </SubMenuItem> \n         <SubMenuItem   to=\"/biswapfind\" as={Link} color=\"text\">\n             <img src=\"/images/routers/5.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('Biswap')}\n            </SubMenuItem>  \n            <SubMenuItem  to=\"/find\" as={Link} color=\"text\">\n            <img src=\"/images/routers/1.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('PancakeSwap')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/radiofind\" as={Link} color=\"text\">\n            <img src=\"/images/routers/4.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('RadioShack')}\n            </SubMenuItem>\n        </SubMenu>\n        </Flex>\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool2\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/addapeliquidity/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/addapeliquidity/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}