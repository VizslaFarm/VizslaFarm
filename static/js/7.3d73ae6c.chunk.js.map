{"version":3,"sources":["components/Links/index.tsx","hooks/useDebouncedChangeHandler.ts","components/App/Settings/SettingsModal5.tsx","components/App/Settings/index5.tsx","components/App/Transactions5/Transaction.tsx","components/App/Transactions5/TransactionsModal.tsx","components/App/Transactions5/index.tsx","components/App/AppHeader5.tsx","hooks/useTransactionDeadline5.ts","hooks/useCurrentBlockTimestamp5.ts","state/burn/hooks5.ts","views/RemoveLiquidity5/index.tsx"],"names":["StyledInternalLink","styled","Link","theme","colors","primary","useDebouncedChangeHandler","value","onChange","debouncedMs","useState","inner","setInner","timer","useRef","onChangeInner","useCallback","newValue","current","clearTimeout","setTimeout","undefined","useEffect","SettingsModal","onDismiss","showConfirmExpertModal","setShowConfirmExpertModal","useUserSlippageTolerance","userSlippageTolerance","setUserslippageTolerance","useUserTransactionTTL","ttl","setTtl","useExpertModeManager","expertMode","toggleExpertMode","useUserSingleHopOnly","singleHopOnly","setSingleHopOnly","useAudioModeManager","onChangeRecipient","useSwapActionHandlers","t","useTranslation","title","onBack","style","maxWidth","variant","mb","id","onClick","window","prompt","gap","padding","bold","fontSize","TransactionSettings","rawSlippage","setRawSlippage","deadline","setDeadline","mt","Row","QuestionHelper","text","ml","checked","SettingsTab","useModal","onPresentSettingsModal","show","p","color","width","TransactionState","div","IconWrapper","pending","success","failure","Transaction","tx","chainId","useActiveWeb3React","summary","receipt","status","href","getBscScanLink","hash","CircleLoader","newTransactionsFirst","a","b","addedTime","renderTransactions","transactions","flexDirection","map","TransactionsModal","account","dispatch","useDispatch","allTransactions","useAllTransactions","sortedRecentTransactions","useMemo","Object","values","filter","isTransactionRecent","sort","confirmed","clearAllTransactionsCallback","clearAllTransactions","length","justifyContent","scale","Transactions","onPresentTransactionsModal","AppHeaderContainer","Flex","cardBorder","AppHeader","subtitle","helper","backTo","noConfig","alignItems","mr","as","to","useTransactionDeadline","useSelector","state","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useSingleCallResult","result","useCurrentBlockTimestamp","add","useBurnState","burn","BorderCard","RemoveLiquidity5","history","useHistory","useParams","currencyIdA","currencyIdB","currencyA","useCurrency","currencyB","library","wrappedCurrency","tokenA","tokenB","independentField","typedValue","usePair","pair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","address","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","raw","TokenAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","error","parsedAmounts","token","multiply","quotient","useDerivedBurnInfo","_onUserInput","onUserInput","field","typeInput","useBurnActionHandlers","isValid","showDetailed","setShowDetailed","attemptingTxn","setAttemptingTxn","txHash","setTxHash","allowedSlippage","formattedAmounts","equalTo","lessThan","toFixed","toSignificant","atMaxAmount","pairContract","usePairContract","signatureData","setSignatureData","useApproveCallback","ROUTER_ADDRESS2","approval","approveCallback","Error","liquidityAmount","nonces","nonce","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","owner","spender","toString","toHexString","toNumber","data","JSON","stringify","types","primaryType","send","then","splitSignature","signature","v","r","s","catch","err","code","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","onRemove","currencyAmountA","currencyAmountB","router","getRouterContract2","calculateSlippageAmount","amountsMin","currencyBIsETH","ETHER","oneCurrencyIsETH","ApprovalState","APPROVED","methodNames","args","Promise","all","methodName","estimateGas","calculateGasMargin","console","safeGasEstimates","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","symbol","modalHeader","align","currency","size","small","textAlign","pt","slippage","modalBottom","assetA","assetB","currency0","currency1","margin","priceOf","disabled","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","Number","parseInt","innerLiquidityPercentage","setInnerLiquidityPercentage","customOnDismiss","content","topContent","bottomContent","onPresentRemoveLiquidity","lineHeight","min","max","onValueChanged","Math","ceil","flexWrap","Column","my","textTransform","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","NOT_APPROVED","PENDING","Dots","ConnectWalletButton","minWidth","showUnwrapped"],"mappings":"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","file":"static/js/7.3d73ae6c.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n","import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\nexport default function useDebouncedChangeHandler<T>(\n  value: T,\n  onChange: (newValue: T) => void,\n  debouncedMs = 100,\n): [T, (value: T) => void] {\n  const [inner, setInner] = useState<T>(() => value)\n  const timer = useRef<ReturnType<typeof setTimeout>>()\n\n  const onChangeInner = useCallback(\n    (newValue: T) => {\n      setInner(newValue)\n      if (timer.current) {\n        clearTimeout(timer.current)\n      }\n      timer.current = setTimeout(() => {\n        onChange(newValue)\n        timer.current = undefined\n      }, debouncedMs)\n    },\n    [debouncedMs, onChange],\n  )\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n      timer.current = undefined\n    }\n    setInner(value)\n  }, [value])\n\n  return [inner, onChangeInner]\n}\n","import React, { useState } from 'react'\nimport { Button, Text, PancakeToggle, Flex, Message, Modal, ModalBody, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance,\n  useUserSingleHopOnly,\n} from 'state/user/hooks/index5'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { useSwapActionHandlers } from 'state/swap/hooks5'\nimport { AutoColumn } from '../../Layout/Column'\nimport QuestionHelper from '../../QuestionHelper'\nimport { RowBetween, RowFixed } from '../../Layout/Row'\nimport TransactionSettings from './TransactionSettings'\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n  const [ttl, setTtl] = useUserTransactionTTL()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n\n  if (showConfirmExpertModal) {\n    return (\n      <Modal\n        title={t('Are you sure?')}\n        onBack={() => setShowConfirmExpertModal(false)}\n        onDismiss={onDismiss}\n        style={{ maxWidth: '420px' }}\n      >\n        <ModalBody>\n          <Message variant=\"warning\" mb=\"24px\">\n            <Text>\n              {t(\n                \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\n              )}\n            </Text>\n          </Message>\n          <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\n          <Button\n            variant=\"danger\"\n            id=\"confirm-expert-mode\"\n            onClick={() => {\n              // eslint-disable-next-line no-alert\n              if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n                toggleExpertMode()\n                setShowConfirmExpertModal(false)\n              }\n            }}\n          >\n            {t('Turn On Expert Mode')}\n          </Button>\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal title={t('Settings')}  onDismiss={onDismiss}>\n      <ModalBody>\n        <AutoColumn gap=\"md\" style={{ padding: '1rem' }}>\n          <Text bold fontSize=\"20px\">\n            {t('Transaction Settings')}\n          </Text>\n          <TransactionSettings\n            rawSlippage={userSlippageTolerance}\n            setRawSlippage={setUserslippageTolerance}\n            deadline={ttl}\n            setDeadline={setTtl}\n          />\n          <Text bold fontSize=\"20px\" mt=\"32px\">\n            {t('Interface Settings')}\n          </Text>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Toggle Expert Mode')}</Text>\n              <QuestionHelper\n                text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n                ml=\"4px\"\n              />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-expert-mode-button\"\n              checked={expertMode}\n              onChange={\n                expertMode\n                  ? () => {\n                      onChangeRecipient(null)\n                      toggleExpertMode()\n                    }\n                  : () => setShowConfirmExpertModal(true)\n              }\n            />\n          </RowBetween>\n          <RowBetween>\n            <RowFixed>\n              <Text fontSize=\"14px\">{t('Disable Multihops')}</Text>\n              <QuestionHelper text={t('Restricts swaps to direct pairs only.')} ml=\"4px\" />\n            </RowFixed>\n            <PancakeToggle\n              id=\"toggle-disable-multihop-button\"\n              checked={singleHopOnly}\n              onChange={() => {\n                setSingleHopOnly(!singleHopOnly)\n              }}\n            />\n          </RowBetween>\n        </AutoColumn>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react'\nimport { Button, TuneIcon, NotificationDot, useModal } from '@pancakeswap/uikit'\nimport { useExpertModeManager } from 'state/user/hooks/index5'\nimport SettingsModal from './SettingsModal5'\n\nexport default function SettingsTab() {\n  const [onPresentSettingsModal] = useModal(<SettingsModal />)\n  const [expertMode] = useExpertModeManager()\n\n  return (\n    <NotificationDot show={expertMode}>\n      <Button variant=\"text\" p={0} onClick={onPresentSettingsModal} id=\"open-settings-dialog-button\">\n        <TuneIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </NotificationDot>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkIcon, CloseIcon, LinkExternal } from '@pancakeswap/uikit'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils/index5'\nimport { TransactionDetails } from 'state/transactions/reducer5'\nimport CircleLoader from '../../Loader/CircleLoader'\n\nconst TransactionState = styled.div<{ pending: boolean; success?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-decoration: none !important;\n  border-radius: 0.5rem;\n  padding: 0.25rem 0rem;\n  font-weight: 500;\n  font-size: 0.825rem;\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst IconWrapper = styled.div<{ pending: boolean; success?: boolean }>`\n  color: ${({ pending, success, theme }) =>\n    pending ? theme.colors.primary : success ? theme.colors.success : theme.colors.failure};\n`\n\nexport default function Transaction({ tx }: { tx: TransactionDetails }) {\n  const { chainId } = useActiveWeb3React()\n\n  const summary = tx?.summary\n  const pending = !tx?.receipt\n  const success = !pending && tx && (tx.receipt?.status === 1 || typeof tx.receipt?.status === 'undefined')\n\n  if (!chainId) return null\n\n  return (\n    <TransactionState pending={pending} success={success}>\n      <LinkExternal href={getBscScanLink(tx.hash, 'transaction', chainId)}>{summary ?? tx.hash}</LinkExternal>\n      <IconWrapper pending={pending} success={success}>\n        {pending ? <CircleLoader /> : success ? <CheckmarkIcon color=\"success\" /> : <CloseIcon color=\"failure\" />}\n      </IconWrapper>\n    </TransactionState>\n  )\n}\n","import React, { useMemo, useCallback } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useDispatch } from 'react-redux'\nimport { Modal, ModalBody, Text, Button, Flex, InjectedModalProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks5'\nimport { TransactionDetails } from 'state/transactions/reducer5'\nimport { AppDispatch } from 'state'\nimport { clearAllTransactions } from 'state/transactions/actions5'\nimport { AutoRow } from '../../Layout/Row'\nimport Transaction from './Transaction'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nfunction renderTransactions(transactions: TransactionDetails[]) {\n  return (\n    <Flex flexDirection=\"column\">\n      {transactions.map((tx) => {\n        return <Transaction key={tx.hash + tx.addedTime} tx={tx} />\n      })}\n    </Flex>\n  )\n}\n\nconst TransactionsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const { account, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const allTransactions = useAllTransactions()\n\n  const { t } = useTranslation()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt)\n\n  const clearAllTransactionsCallback = useCallback(() => {\n    if (chainId) dispatch(clearAllTransactions({ chainId }))\n  }, [dispatch, chainId])\n\n  return (\n    <Modal title={t('Recent Transactions')}  onDismiss={onDismiss}>\n      {account && (\n        <ModalBody>\n          {!!pending.length || !!confirmed.length ? (\n            <>\n              <AutoRow mb=\"1rem\" style={{ justifyContent: 'space-between' }}>\n                <Text>{t('Recent Transactions')}</Text>\n                <Button variant=\"tertiary\" scale=\"xs\" onClick={clearAllTransactionsCallback}>\n                  {t('clear all')}\n                </Button>\n              </AutoRow>\n              {renderTransactions(pending)}\n              {renderTransactions(confirmed)}\n            </>\n          ) : (\n            <Text>{t('No recent transactions')}</Text>\n          )}\n        </ModalBody>\n      )}\n    </Modal>\n  )\n}\n\nexport default TransactionsModal\n","import React from 'react'\nimport { HistoryIcon, Button, useModal } from '@pancakeswap/uikit'\nimport TransactionsModal from './TransactionsModal'\n\nconst Transactions = () => {\n  const [onPresentTransactionsModal] = useModal(<TransactionsModal />)\n  return (\n    <>\n      <Button variant=\"text\" p={0} onClick={onPresentTransactionsModal} ml=\"16px\">\n        <HistoryIcon color=\"primary\" width=\"24px\" />\n      </Button>\n    </>\n  )\n}\n\nexport default Transactions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Heading, IconButton, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport Settings from './Settings/index5'\nimport Transactions from './Transactions5'\nimport QuestionHelper from '../QuestionHelper'\n\ninterface Props {\n  title: string\n  subtitle: string\n  helper?: string\n  backTo?: string\n  noConfig?: boolean\n}\n\nconst AppHeaderContainer = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px;\n  width: 100%;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst AppHeader: React.FC<Props> = ({ title, subtitle, helper, backTo, noConfig = false }) => {\n  return (\n    <AppHeaderContainer>\n      <Flex alignItems=\"center\" mr={noConfig ? 0 : '16px'}>\n        {backTo && (\n          <IconButton as={Link} to={backTo}>\n            <ArrowBackIcon width=\"32px\" />\n          </IconButton>\n        )}\n        <Flex flexDirection=\"column\">\n          <Heading as=\"h2\" mb=\"8px\">\n            {title}\n          </Heading>\n          <Flex alignItems=\"center\">\n            {helper && <QuestionHelper text={helper} mr=\"4px\" />}\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {subtitle}\n            </Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      {!noConfig && (\n        <Flex>\n          <Settings />\n          <Transactions />\n        </Flex>\n      )}\n    </AppHeaderContainer>\n  )\n}\n\nexport default AppHeader\n","import { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../state'\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp5'\n\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\nexport default function useTransactionDeadline(): BigNumber | undefined {\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\n  const blockTimestamp = useCurrentBlockTimestamp()\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\n    return undefined\n  }, [blockTimestamp, ttl])\n}\n","import { BigNumber } from 'ethers'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useMulticallContract } from './useContract5'\n\n// gets the current timestamp from the blockchain\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\n  const multicall = useMulticallContract()\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\n}\n","import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@uniswap/sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency5'\nimport { usePair } from 'hooks/usePairs5'\nimport useTotalSupply from 'hooks/useTotalSupply5'\n\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks5'\nimport { useTokenBalances } from '../wallet/hooks5'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@uniswap/sdk'\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@pancakeswap/uikit'\nimport { useHistory, useParams } from 'react-router'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal5'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel5'\nimport { MinimalPositionCard } from '../../components/PositionCard5'\nimport { AppHeader, AppBody } from '../../components/App/index5'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\nimport { LightGreyCard } from '../../components/Card'\n\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo/index5'\nimport { ROUTER_ADDRESS2 } from '../../config/constants/index5'\nimport { useCurrency } from '../../hooks/Tokens5'\nimport { usePairContract } from '../../hooks/useContract5'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline5'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks5'\nimport StyledInternalLink from '../../components/Links'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract2 } from '../../utils/index5'\nimport { currencyId } from '../../utils/currencyId5'\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency5'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback5'\nimport Dots from '../../components/Loader/Dots'\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks5'\n\nimport { Field } from '../../state/burn/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks/index5'\nimport Page from '../PageL5'\n\nconst BorderCard = styled.div`\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n  padding: 16px;\n`\n\nexport default function RemoveLiquidity5() {\n  const history = useHistory()\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string }>()\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\n  const { account, chainId, library } = useActiveWeb3React()\n  const [tokenA, tokenB] = useMemo(\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\n    [currencyA, currencyB, chainId],\n  )\n\n  const { t } = useTranslation()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const deadline = useTransactionDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_A]:\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_B]:\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\n\n  // allowance handling\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS2)\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    // try to gather a signature for permission\n    const nonce = await pairContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ]\n    const domain = {\n      name: 'Uniswap V2',\n      version: '1',\n      chainId,\n      verifyingContract: pair.liquidityToken.address,\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ]\n    const message = {\n      owner: account,\n      spender: ROUTER_ADDRESS2,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber(),\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then((signature) => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadline.toNumber(),\n        })\n      })\n      .catch((err) => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (err?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, value: string) => {\n      setSignatureData(null)\n      return _onUserInput(field, value)\n    },\n    [_onUserInput],\n  )\n\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n  async function onRemove() {\n    if (!chainId || !library || !account || !deadline) throw new Error('missing dependencies')\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\n    if (!currencyAmountA || !currencyAmountB) {\n      throw new Error('missing currency amounts')\n    }\n    const router = getRouterContract2(chainId, library, account)\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\n    }\n\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    const currencyBIsETH = currencyB === ETHER\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\n\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\n\n    let methodNames: string[]\n    let args: Array<string | string[] | number | boolean>\n    // we have approval, use normal remove liquidity\n    if (approval === ApprovalState.APPROVED) {\n      // removeLiquidityETH\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n      // removeLiquidity\n      else {\n        methodNames = ['removeLiquidity']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n    }\n    // we have a signataure, use permit versions of remove liquidity\n    else if (signatureData !== null) {\n      // removeLiquidityETHWithPermit\n      if (oneCurrencyIsETH) {\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n      // removeLiquidityETHWithPermit\n      else {\n        methodNames = ['removeLiquidityWithPermit']\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          signatureData.deadline,\n          false,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ]\n      }\n    } else {\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\n    }\n\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\n      methodNames.map((methodName) =>\n        router.estimateGas[methodName](...args)\n          .then(calculateGasMargin)\n          .catch((err) => {\n            console.error(`estimateGas failed`, methodName, args, err)\n            return undefined\n          }),\n      ),\n    )\n\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\n      BigNumber.isBigNumber(safeGasEstimate),\n    )\n\n    // all estimations failed...\n    if (indexOfSuccessfulEstimation === -1) {\n      console.error('This transaction would fail. Please contact support.')\n    } else {\n      const methodName = methodNames[indexOfSuccessfulEstimation]\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\n\n      setAttemptingTxn(true)\n      await router[methodName](...args, {\n        gasLimit: safeGasEstimate,\n      })\n        .then((response: TransactionResponse) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencyA?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        })\n        .catch((err: Error) => {\n          setAttemptingTxn(false)\n          // we only care if the error is something _other_ than the user rejected the tx\n          console.error(err)\n        })\n    }\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\">\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyA?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <AddIcon width=\"16px\" />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\">\n              {currencyB?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <Text small textAlign=\"left\" pt=\"12px\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\n          <RowFixed>\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\n          </RowFixed>\n        </RowBetween>\n        {pair && (\n          <>\n            <RowBetween>\n              <Text>{t('Price')}</Text>\n              <Text>\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text>\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          {t('Confirm')}\n        </Button>\n      </>\n    )\n  }\n\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencyA?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencyB?.symbol ?? '',\n  })\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput],\n  )\n\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\n  )\n\n  const handleSelectCurrencyA = useCallback(\n    (currency: Currency) => {\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\n        history.push(`/removeeth/${currencyId(currency)}/${currencyIdA}`)\n      } else {\n        history.push(`/removeeth/${currencyId(currency)}/${currencyIdB}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n  const handleSelectCurrencyB = useCallback(\n    (currency: Currency) => {\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\n        history.push(`/removeeth/${currencyIdB}/${currencyId(currency)}`)\n      } else {\n        history.push(`/removeeth/${currencyIdA}/${currencyId(currency)}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\n    }\n    setTxHash('')\n  }, [onUserInput, txHash])\n\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\n    liquidityPercentChangeCallback,\n  )\n\n  const [onPresentRemoveLiquidity] = useModal(\n    <TransactionConfirmationModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash || ''}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n    />,\n    true,\n    true,\n    'removeLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          backTo=\"/pool5\"\n          title={t('Remove %assetA%-%assetB% liquidity', {\n            assetA: currencyA?.symbol ?? '',\n            assetB: currencyB?.symbol ?? '',\n          })}\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\n          noConfig\n        />\n\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            <RowBetween>\n              <Text>{t('Amount')}</Text>\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\n                {showDetailed ? t('Simple') : t('Detailed')}\n              </Button>\n            </RowBetween>\n            {!showDetailed && (\n              <BorderCard>\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                </Text>\n                <Slider\n                  name=\"lp-amount\"\n                  min={0}\n                  max={100}\n                  value={innerLiquidityPercentage}\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\n                  mb=\"16px\"\n                />\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\n                    25%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\n                    50%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\n                    75%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\n                    Max\n                  </Button>\n                </Flex>\n              </BorderCard>\n            )}\n          </AutoColumn>\n          {!showDetailed && (\n            <>\n              <ColumnCenter>\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <AutoColumn gap=\"10px\">\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                  {t('You will receive')}\n                </Text>\n                <LightGreyCard>\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyA} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\n                        {currencyA?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\n                  </Flex>\n                  <Flex justifyContent=\"space-between\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyB} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\n                        {currencyB?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\n                  </Flex>\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\n                      {oneCurrencyIsETH ? (\n                        <StyledInternalLink\n                          to={`/removeeth/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\n                          }`}\n                        >\n                          {t('Receive WBNB')}\n                        </StyledInternalLink>\n                      ) : oneCurrencyIsWETH ? (\n                        <StyledInternalLink\n                          to={`/removeeth/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\n                          }`}\n                        >\n                          {t('Receive BNB')}\n                        </StyledInternalLink>\n                      ) : null}\n                    </RowBetween>\n                  ) : null}\n                </LightGreyCard>\n              </AutoColumn>\n            </>\n          )}\n\n          {showDetailed && (\n            <Box my=\"16px\">\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.LIQUIDITY]}\n                onUserInput={onLiquidityInput}\n                onMax={() => {\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                }}\n                showMaxButton={!atMaxAmount}\n                disableCurrencySelect\n                currency={pair?.liquidityToken}\n                pair={pair}\n                id=\"liquidity-amount\"\n                onCurrencySelect={() => null}\n              />\n              <ColumnCenter>\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onCurrencyAInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyA}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyA}\n                id=\"remove-liquidity-tokena\"\n              />\n              <ColumnCenter>\n                <AddIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onCurrencyBInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyB}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyB}\n                id=\"remove-liquidity-tokenb\"\n              />\n            </Box>\n          )}\n          {pair && (\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Prices')}\n              </Text>\n              <LightGreyCard>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyA?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n                  </Text>\n                </Flex>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyB?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n                  </Text>\n                </Flex>\n              </LightGreyCard>\n            </AutoColumn>\n          )}\n          <Box position=\"relative\" mt=\"16px\">\n            {!account ? (\n              <ConnectWalletButton />\n            ) : (\n              <RowBetween>\n                <Button\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\n                  onClick={onAttemptToApprove}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                  width=\"100%\"\n                  mr=\"0.5rem\"\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>{t('Enabling')}</Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    t('Enabled')\n                  ) : (\n                    t('Enable')\n                  )}\n                </Button>\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    onPresentRemoveLiquidity()\n                  }}\n                  width=\"100%\"\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                >\n                  {error || t('Remove')}\n                </Button>\n              </RowBetween>\n            )}\n          </Box>\n        </CardBody>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n"],"sourceRoot":""}