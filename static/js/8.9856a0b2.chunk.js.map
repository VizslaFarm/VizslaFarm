{"version":3,"sources":["components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx","views/Voting/components/CastVoteModal/types.ts","views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","utils/truncateWalletAddress.ts","views/Voting/config.ts","state/voting/hooks.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx"],"names":["Table","styled","table","theme","colors","text","ThemedComponent","div","Title","props","as","scale","my","markdownComponents","h1","h2","h3","h4","h5","h6","p","ol","ul","pre","ReactMarkdown","remarkPlugins","gfm","components","ConfirmVoteView","DetailBox","Box","background","cardBorder","Details","proposal","t","useTranslation","startDate","Date","start","endDate","end","mb","alignItems","color","href","IPFS_GATEWAY","id","ml","slice","getBscScanLink","author","truncateWalletAddress","snapshot","proposalState","state","fontSize","format","TextEllipsis","Text","Results","choices","votes","results","calculateVoteResults","votingStatus","useGetVotingStateLoadingStatus","account","useWeb3React","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","eq","times","toNumber","hasVoted","some","vote","voter","toLowerCase","mt","title","variant","outline","mr","primaryStep","justifyContent","total","toFormat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count","height","MainView","isPending","isLoading","onConfirm","onViewDetails","onDismiss","textTransform","bold","label","onClick","style","cursor","width","endIcon","spin","disabled","CastVoteModal","onSuccess","proposalId","block","useState","MAIN","view","setView","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","library","useWeb3Provider","useTheme","useGetVotingPower","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","verificationHash","isStartView","handleBack","DETAILS","handleDismiss","handleConfirmVote","a","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","votingPower","toString","signMessage","sig","msg","address","sendSnaphotData","message","console","error","onBack","hideCloseButton","headerBackground","gradients","cardHeader","DetailsView","Choice","isChecked","isDisabled","ChoiceText","Vote","setVote","toastSuccess","dispatch","useAppDispatch","handleSuccess","fetchVotes","Number","useModal","presentCastVoteModal","flexShrink","checked","onChange","ConnectWalletButton","Row","Flex","StyledSkeleton","Skeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","Grid","mediaQueries","sm","VoteRow","isVoter","hasVotingPower","BigNumber","parseVotePower","incomingVote","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","useEffect","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","Layout","isCoreProposal","body","ProposalState","ACTIVE","PageLoader","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","getCakeAddress","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","fetch","SNAPSHOT_HUB_API","method","headers","Accept","response","ok","json","Error","error_description","data","getVotingPower","poolAddresses","simpleRpcProvider","getBlockNumber","blockNumber","SNAPSHOT_VOTING_API","reduce","accum","choiceText","power","plus","BIG_ZERO","startLength","endLength","substring","PROPOSALS_TO_SHOW","VOTE_THRESHOLD","useGetProposals","useSelector","voting","Object","values","_inValid","ProposalStateTag","PENDING","ProposalTypeTag","VotingBox","ModalInner","maxWidth","lg","textAlign","initialState","isActive","setVotingPower","setIsLoading","getActivePools","eligiblePools","contractAddress","getAddress","prevVotingPower","fetchVotingPower"],"mappings":"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","file":"static/js/8.9856a0b2.chunk.js","sourcesContent":["import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\nimport styled from 'styled-components'\n\nconst Table = styled.table`\n  margin-bottom: 32px;\n  margin-top: 32px;\n  width: 100%;\n\n  td,\n  th {\n    color: ${({ theme }) => theme.colors.text};\n    padding: 8px;\n  }\n`\n\nconst ThemedComponent = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n\n  li {\n    margin-bottom: 8px;\n  }\n`\n\nconst Pre = styled.pre`\n  color: ${({ theme }) => theme.colors.text};\n  margin-bottom: 16px;\n  margin-top: 16px;\n  max-width: 100%;\n  overflow-x: auto;\n`\n\nconst Title = (props) => {\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\n}\n\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\n  h1: Title,\n  h2: Title,\n  h3: Title,\n  h4: Title,\n  h5: Title,\n  h6: Title,\n  p: (props) => {\n    return <Text as=\"p\" my=\"16px\" {...props} />\n  },\n  table: Table,\n  ol: (props) => {\n    return <ThemedComponent as=\"ol\" {...props} />\n  },\n  ul: (props) => {\n    return <ThemedComponent as=\"ul\" {...props} />\n  },\n  pre: Pre,\n}\n\nexport default markdownComponents\n","import React from 'react'\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport markdownComponents from './styles'\n\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\n}\n\nexport default ReactMarkdown\n","import { InjectedModalProps } from '@pancakeswap/uikit'\n\nexport enum ConfirmVoteView {\n  MAIN = 'main',\n  DETAILS = 'details',\n}\n\nexport interface CastVoteModalProps extends InjectedModalProps {\n  onSuccess: () => Promise<void>\n  proposalId: string\n  vote: {\n    label: string\n    value: number\n  }\n  block?: number\n}\n","import React from 'react'\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { format } from 'date-fns'\nimport { Proposal } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { IPFS_GATEWAY } from '../config'\nimport { ProposalStateTag } from '../components/Proposals/tags'\n\ninterface DetailsProps {\n  proposal: Proposal\n}\n\nconst DetailBox = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 16px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\n  const { t } = useTranslation()\n  const startDate = new Date(proposal.start * 1000)\n  const endDate = new Date(proposal.end * 1000)\n\n  return (\n    <Card mb=\"16px\">\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Details')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\n            {proposal.id.slice(0, 8)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"8px\">\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.author, 'address')} ml=\"8px\">\n            {truncateWalletAddress(proposal.author)}\n          </LinkExternal>\n        </Flex>\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\n          <LinkExternal href={getBscScanLink(proposal.snapshot, 'block')} ml=\"8px\">\n            {proposal.snapshot}\n          </LinkExternal>\n        </Flex>\n        <DetailBox p=\"16px\">\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('Start Date')}\n            </Text>\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n          <Flex alignItems=\"center\">\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {t('End Date')}\n            </Text>\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\n          </Flex>\n        </DetailBox>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Details\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst TextEllipsis = styled(Text)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nexport default TextEllipsis\n","import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Card,\n  CardBody,\n  CardHeader,\n  Heading,\n  Progress,\n  Skeleton,\n  Tag,\n  CheckmarkCircleIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport times from 'lodash/times'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\nimport TextEllipsis from '../components/TextEllipsis'\n\ninterface ResultsProps {\n  choices: string[]\n  votes: Vote[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\n  const { t } = useTranslation()\n  const results = calculateVoteResults(votes)\n  const votingStatus = useGetVotingStateLoadingStatus()\n  const { account } = useWeb3React()\n  const totalVotes = getTotalFromVotes(votes)\n\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Current Results')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\n          choices.map((choice, index) => {\n            const choiceVotes = results[choice] || []\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\n\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\n            const hasVoted = choiceVotes.some((vote) => {\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\n            })\n\n            return (\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\n                <Flex alignItems=\"center\" mb=\"8px\">\n                  <TextEllipsis mb=\"4px\" title={choice}>\n                    {choice}\n                  </TextEllipsis>\n                  {hasVoted && (\n                    <Tag variant=\"success\" outline ml=\"8px\">\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n                    </Tag>\n                  )}\n                </Flex>\n                <Box mb=\"4px\">\n                  <Progress primaryStep={progress} scale=\"sm\" />\n                </Box>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\n                  <Text>\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\n                  </Text>\n                </Flex>\n              </Box>\n            )\n          })}\n\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\n          times(choices.length).map((count, index) => {\n            return (\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\n                <Skeleton height=\"36px\" mb=\"4px\" />\n              </Box>\n            )\n          })}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Results\n","import React from 'react'\nimport { IconButton, Text, Skeleton, Button, AutoRenewIcon, ChevronRightIcon } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport TextEllipsis from '../TextEllipsis'\nimport { VotingBox, ModalInner } from './styles'\nimport { CastVoteModalProps } from './types'\n\ninterface MainViewProps {\n  vote: {\n    label: string\n    value: number\n  }\n  isLoading: boolean\n  isPending: boolean\n  total: BigNumber\n  onConfirm: () => void\n  onViewDetails: () => void\n  onDismiss: CastVoteModalProps['onDismiss']\n}\n\nconst MainView: React.FC<MainViewProps> = ({\n  vote,\n  total,\n  isPending,\n  isLoading,\n  onConfirm,\n  onViewDetails,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ModalInner>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Voting For')}\n        </Text>\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\n          {vote.label}\n        </TextEllipsis>\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\n          {t('Your Voting Power')}\n        </Text>\n        {isLoading ? (\n          <Skeleton height=\"64px\" mb=\"24px\" />\n        ) : (\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\n            <Text bold fontSize=\"20px\">\n              {total.toFormat(3)}\n            </Text>\n            <IconButton scale=\"sm\" variant=\"text\">\n              <ChevronRightIcon width=\"24px\" />\n            </IconButton>\n          </VotingBox>\n        )}\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\n        </Text>\n      </ModalInner>\n      <Button\n        isLoading={isPending}\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={isLoading || total.eq(0)}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={onConfirm}\n      >\n        {t('Confirm Vote')}\n      </Button>\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\n        {t('Cancel')}\n      </Button>\n    </>\n  )\n}\n\nexport default MainView\n","import React, { useState } from 'react'\nimport { Box, Modal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { SnapshotCommand } from 'state/types'\nimport { signMessage } from 'utils/web3React'\nimport useToast from 'hooks/useToast'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport useTheme from 'hooks/useTheme'\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\nimport MainView from './MainView'\nimport DetailsView from './DetailsView'\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\n\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\n  const [modalIsOpen, setModalIsOpen] = useState(true)\n  const [isPending, setIsPending] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { library } = useWeb3Provider()\n  const { theme } = useTheme()\n  const {\n    isLoading,\n    total,\n    cakeBalance,\n    cakeVaultBalance,\n    cakePoolBalance,\n    poolsBalance,\n    cakeBnbLpBalance,\n    verificationHash,\n  } = useGetVotingPower(block, modalIsOpen)\n\n  const isStartView = view === ConfirmVoteView.MAIN\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\n\n  const title = {\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\n  }\n\n  const handleDismiss = () => {\n    setModalIsOpen(false)\n    onDismiss()\n  }\n\n  const handleConfirmVote = async () => {\n    try {\n      setIsPending(true)\n      const voteMsg = JSON.stringify({\n        ...generatePayloadData(),\n        type: SnapshotCommand.VOTE,\n        payload: {\n          proposal: proposalId,\n          choice: vote.value,\n          metadata: {\n            votingPower: total.toString(),\n            verificationHash,\n          },\n        },\n      })\n\n      const sig = await signMessage(library, account, voteMsg)\n      const msg: Message = { address: account, msg: voteMsg, sig }\n\n      // Save proposal to snapshot\n      await sendSnaphotData(msg)\n      setIsPending(false)\n\n      await onSuccess()\n\n      handleDismiss()\n    } catch (error) {\n      setIsPending(false)\n      toastError(t('Error'), error?.message)\n      console.error(error)\n    }\n  }\n\n  return (\n    <Modal\n      title={title[view]}\n      onBack={handleBack}\n      onDismiss={onDismiss}\n      hideCloseButton={!isStartView}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Box mb=\"24px\" width=\"320px\">\n        {view === ConfirmVoteView.MAIN && (\n          <MainView\n            vote={vote}\n            isLoading={isLoading}\n            isPending={isPending}\n            total={total}\n            onConfirm={handleConfirmVote}\n            onViewDetails={handleViewDetails}\n            onDismiss={handleDismiss}\n          />\n        )}\n        {view === ConfirmVoteView.DETAILS && (\n          <DetailsView\n            total={total}\n            cakeBalance={cakeBalance}\n            cakeVaultBalance={cakeVaultBalance}\n            cakePoolBalance={cakePoolBalance}\n            poolsBalance={poolsBalance}\n            cakeBnbLpBalance={cakeBnbLpBalance}\n          />\n        )}\n      </Box>\n    </Modal>\n  )\n}\n\nexport default CastVoteModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { Proposal } from 'state/types'\nimport { fetchVotes } from 'state/voting'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport CastVoteModal from '../components/CastVoteModal'\n\ninterface VoteProps extends CardProps {\n  proposal: Proposal\n}\n\ninterface State {\n  label: string\n  value: number\n}\n\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\n  align-items: center;\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\n  border-radius: 16px;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  margin-bottom: 16px;\n  padding: 16px;\n`\n\nconst ChoiceText = styled.div`\n  flex: 1;\n  padding-left: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 0;\n`\n\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\n  const [vote, setVote] = useState<State>(null)\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleSuccess = async () => {\n    toastSuccess(t('Vote cast!'))\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\n  }\n\n  const [presentCastVoteModal] = useModal(\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\n  )\n\n  return (\n    <Card {...props}>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Cast your vote')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {proposal.choices.map((choice, index) => {\n          const isChecked = index + 1 === vote?.value\n\n          const handleChange = () => {\n            setVote({\n              label: choice,\n              value: index + 1,\n            })\n          }\n\n          return (\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\n              <div style={{ flexShrink: 0 }}>\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\n              </div>\n              <ChoiceText>\n                <Text as=\"span\" title={choice}>\n                  {choice}\n                </Text>\n              </ChoiceText>\n            </Choice>\n          )\n        })}\n        {account ? (\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\n            {t('Cast Vote')}\n          </Button>\n        ) : (\n          <ConnectWalletButton />\n        )}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Vote\n","import React from 'react'\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\nimport styled from 'styled-components'\n\nconst Row = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 16px 24px;\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  flex: 1;\n`\n\nconst VotesLoading = () => {\n  return (\n    <Box>\n      {times(10).map((index) => (\n        <Row key={index}>\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\n        </Row>\n      ))}\n    </Box>\n  )\n}\n\nexport default VotesLoading\n","import styled from 'styled-components'\nimport { Grid, Box } from '@pancakeswap/uikit'\n\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\n  grid-area: address;\n`\n\nexport const ChoiceColumn = styled(Box)`\n  grid-area: choice;\n  overflow: hidden;\n`\n\nexport const VotingPowerColumn = styled(Box)`\n  justify-self: end;\n  grid-area: vote;\n`\n\nconst Row = styled(Grid)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  grid-gap: 8px;\n  grid-template-areas: 'address choice vote';\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\n  padding: 8px 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 16px;\n    padding: 16px 24px;\n  }\n`\n\nexport default Row\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote } from 'state/types'\nimport { IPFS_GATEWAY } from '../../config'\nimport TextEllipsis from '../TextEllipsis'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface VoteRowProps {\n  vote: Vote\n  isVoter: boolean\n}\n\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\n  const { t } = useTranslation()\n  const hasVotingPower = !!vote.metadata?.votingPower\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\n\n  return (\n    <Row>\n      <AddressColumn>\n        <Flex alignItems=\"center\">\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateWalletAddress(vote.voter)}</LinkExternal>\n          {isVoter && (\n            <Tag variant=\"success\" outline ml=\"8px\">\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n            </Tag>\n          )}\n        </Flex>\n      </AddressColumn>\n      <ChoiceColumn>\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\n          {vote.proposal.choices[vote.choice - 1]}\n        </TextEllipsis>\n      </ChoiceColumn>\n      <VotingPowerColumn>\n        <Flex alignItems=\"center\" justifyContent=\"end\">\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\n        </Flex>\n      </VotingPowerColumn>\n    </Row>\n  )\n}\n\nexport default VoteRow\n","import React, { useState } from 'react'\nimport {\n  AutoRenewIcon,\n  Card,\n  CardHeader,\n  ChevronDownIcon,\n  Flex,\n  Heading,\n  Button,\n  ChevronUpIcon,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport orderBy from 'lodash/orderBy'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\nimport VotesLoading from '../components/Proposal/VotesLoading'\nimport VoteRow from '../components/Proposal/VoteRow'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\n\nconst VOTES_PER_VIEW = 20\n\ninterface VotesProps {\n  votes: Vote[]\n}\n\nconst parseVotePower = (incomingVote: Vote) => {\n  return parseFloat(incomingVote?.metadata?.votingPower)\n}\n\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\n  const [showAll, setShowAll] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\n  const voteStatus = useGetVotingStateLoadingStatus()\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\n\n  const handleClick = () => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\" scale=\"md\">\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\n          </Heading>\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\n        </Flex>\n      </CardHeader>\n      {!isFinished && <VotesLoading />}\n\n      {isFinished && displayVotes.length > 0 && (\n        <>\n          <Row>\n            <AddressColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Voter')}\n              </Text>\n            </AddressColumn>\n            <ChoiceColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Decision')}\n              </Text>\n            </ChoiceColumn>\n            <VotingPowerColumn>\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\n                {t('Vote Weight')}\n              </Text>\n            </VotingPowerColumn>\n          </Row>\n          {displayVotes.map((vote) => {\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\n          })}\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\n            <Button\n              width=\"100%\"\n              onClick={handleClick}\n              variant=\"text\"\n              endIcon={\n                showAll ? (\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\n                ) : (\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\n                )\n              }\n              disabled={!isFinished}\n            >\n              {showAll ? t('Hide') : t('See All')}\n            </Button>\n          </Flex>\n        </>\n      )}\n\n      {isFinished && displayVotes.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\n        </Flex>\n      )}\n    </Card>\n  )\n}\n\nexport default Votes\n","import React, { useEffect } from 'react'\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link, useParams } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\nimport {\n  useGetProposal,\n  useGetVotingStateLoadingStatus,\n  useGetVotes,\n  useGetProposalLoadingStatus,\n} from 'state/voting/hooks'\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport ReactMarkdown from 'components/ReactMarkdown'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { isCoreProposal } from '../helpers'\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\nimport Layout from '../components/Layout'\nimport Details from './Details'\nimport Results from './Results'\nimport Vote from './Vote'\nimport Votes from './Votes'\n\nconst Proposal = () => {\n  const { id }: { id: string } = useParams()\n  const proposal = useGetProposal(id)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const votes = useGetVotes(id)\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\n  const isPageLoading =\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\n\n  useEffect(() => {\n    dispatch(fetchProposal(id))\n  }, [id, dispatch])\n\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\n  useEffect(() => {\n    const getVotes = async () => {\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\n      dispatch(verifyVotes({ proposalId, snapshot }))\n    }\n\n    if (proposalId && snapshot) {\n      getVotes()\n    }\n  }, [proposalId, snapshot, dispatch])\n\n  if (!proposal) {\n    return <PageLoader />\n  }\n\n  return (\n    <Container py=\"40px\">\n      <Box mb=\"40px\">\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\n          {t('Back to Vote Overview')}\n        </Button>\n      </Box>\n      <Layout>\n        <Box>\n          <Box mb=\"32px\">\n            <Flex alignItems=\"center\" mb=\"8px\">\n              <ProposalStateTag proposalState={proposal.state} />\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\n            </Flex>\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\n              {proposal.title}\n            </Heading>\n            <Box>\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\n            </Box>\n          </Box>\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\n            <Vote proposal={proposal} mb=\"16px\" />\n          )}\n          <Votes votes={votes} />\n        </Box>\n        <Box>\n          <Details proposal={proposal} />\n          <Results choices={proposal.choices} votes={votes} />\n        </Box>\n      </Layout>\n    </Container>\n  )\n}\n\nexport default Proposal\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\n\nexport const isCoreProposal = (proposal: Proposal) => {\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\n}\n\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\n  switch (proposalType) {\n    case ProposalType.COMMUNITY:\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\n    case ProposalType.CORE:\n      return proposals.filter((proposal) => isCoreProposal(proposal))\n    case ProposalType.ALL:\n    default:\n      return proposals\n  }\n}\n\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\n  return proposals.filter((proposal) => proposal.state === state)\n}\n\nexport interface Message {\n  address: string\n  msg: string\n  sig: string\n}\n\n/**\n * Generates metadata required by snapshot to validate payload\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\n  }\n}\n\n/**\n * Returns data that is required on all snapshot payloads\n */\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE,\n  }\n}\n\n/**\n * General function to send commands to the snapshot api\n */\nexport const sendSnaphotData = async (message: Message) => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error?.error_description)\n  }\n\n  const data = await response.json()\n  return data\n}\n\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      address: account,\n      block: blockNumber,\n      poolAddresses,\n    }),\n  })\n  const data = await response.json()\n  return data.data\n}\n\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\n  return votes.reduce((accum, vote) => {\n    const choiceText = vote.proposal.choices[vote.choice - 1]\n\n    return {\n      ...accum,\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\n    }\n  }, {})\n}\n\nexport const getTotalFromVotes = (votes: Vote[]) => {\n  return votes.reduce((accum, vote) => {\n    const power = new BigNumber(vote.metadata?.votingPower)\n    return accum.plus(power)\n  }, BIG_ZERO)\n}\n","/**\n * Truncates a wallet's address\n */\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\n}\n\nexport default truncateWalletAddress\n","export const PROPOSALS_TO_SHOW = 10\nexport const ADMIN_ADDRESS = '0xa3D2124E4023ea5c74dC749012E0B46E42bDD648'\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\nexport const SNAPSHOT_VERSION = '0.1.3'\nexport const PANCAKE_SPACE = 'cakevote.eth'\nexport const VOTE_THRESHOLD = 10\n","import { useSelector } from 'react-redux'\nimport { State } from '../types'\n\n// Voting\nexport const useGetProposals = () => {\n  const proposals = useSelector((state: State) => state.voting.proposals)\n  return Object.values(proposals)\n}\n\nexport const useGetProposal = (proposalId: string) => {\n  const proposal = useSelector((state: State) => state.voting.proposals[proposalId])\n  return proposal\n}\n\nexport const useGetVotes = (proposalId: string) => {\n  const votes = useSelector((state: State) => state.voting.votes[proposalId])\n  return votes ? votes.filter((vote) => vote._inValid !== true) : []\n}\n\nexport const useGetVotingStateLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.voteLoadingStatus)\n  return votingStatus\n}\n\nexport const useGetProposalLoadingStatus = () => {\n  const votingStatus = useSelector((state: State) => state.voting.proposalLoadingStatus)\n  return votingStatus\n}\n","import React from 'react'\nimport { TagProps } from '@pancakeswap/uikit'\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\nimport { ProposalState } from 'state/types'\n\ninterface ProposalStateTagProps extends TagProps {\n  proposalState: ProposalState\n}\n\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\n  if (proposalState === ProposalState.ACTIVE) {\n    return <VoteNowTag {...props} />\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return <SoonTag {...props} />\n  }\n\n  return <ClosedTag {...props} />\n}\n\ninterface ProposalTypeTagProps extends TagProps {\n  isCoreProposal: boolean\n}\n\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\n  if (isCoreProposal) {\n    return <CoreTag {...props} />\n  }\n\n  return <CommunityTag {...props} />\n}\n","import React from 'react'\nimport { Box, BoxProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const VotingBox = styled.div`\n  align-items: center;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 12px;\n  display: flex;\n  height: 64px;\n  justify-content: space-between;\n  margin-bottom: 24px;\n  padding: 0 16px;\n`\n\nexport const ModalInner: React.FC<BoxProps> = (props) => {\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\n}\n","import styled from 'styled-components'\n\nconst Layout = styled.div`\n  align-items: start;\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: minmax(0, 1fr);\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: 1fr 332px;\n  }\n`\n\nexport default Layout\n","import React from 'react'\nimport { Text, Flex } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { VotingBox, ModalInner } from './styles'\n\ninterface DetailsViewProps {\n  total: BigNumber\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n}\n\nconst DetailsView: React.FC<DetailsViewProps> = ({\n  total,\n  cakeBalance,\n  cakeVaultBalance,\n  cakePoolBalance,\n  poolsBalance,\n  cakeBnbLpBalance,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <ModalInner mb=\"0\">\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\n        {t(\n          'Your voting power is determined by the amount of CAKE you held at the block detailed below. CAKE held in other places does not contribute to your voting power.',\n        )}\n      </Text>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Overview')}\n      </Text>\n      <VotingBox>\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\n        <Text bold fontSize=\"20px\">\n          {total.toFormat(3)}\n        </Text>\n      </VotingBox>\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\n        {t('Your Cake Held Now')}\n      </Text>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Wallet')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Manual CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Auto CAKE Pool')}\n        </Text>\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('Other Syrup Pools')}\n        </Text>\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\n        <Text color=\"textSubtle\" fontSize=\"16px\">\n          {t('CAKE BNB LP')}\n        </Text>\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\n      </Flex>\n    </ModalInner>\n  )\n}\n\nexport default DetailsView\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: BigNumber\n  cakeVaultBalance: BigNumber\n  cakePoolBalance: BigNumber\n  poolsBalance: BigNumber\n  cakeBnbLpBalance: BigNumber\n  total: BigNumber\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n"],"sourceRoot":""}