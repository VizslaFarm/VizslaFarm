{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","totalValueFormatted","removed","lpLabel","addLiquidityUrl","justifyContent","width","height","href","Flex","runningLightAnimation","keyframes","Title","Heading","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol1","lpLabel2","alignItems","mb","src","alt","flexDirection","mt","split","fontSize","variant","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","console","error","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","StyledCard","Card","FarmCardInnerContainer","ButtonText","ExpandingWrapper","secondary","FarmCard","displayApr","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","lpSymbol2","earnLabel","dual","lpLabel3","lpSymbol3","liquidityUrlPathParts","quoteToken","token","isPromotedFarm","isEvent","lpSymbol1","toLocaleLowerCase","isActive","isCommunity","tokenSymbol2","display","apr","CardActionsContainer","as","Link","to","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","BASE_ADD_LIQUIDITY_URL","IconImage","Image","Farm","image","label","label2","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","ml","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","background","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","cardBorder","md","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","SearchInput","event","target","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/24.212c7035.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useLocation, Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Tag, Flex, Heading, Image , Text} from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  lpLabel2?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol1?: string\n  tokenSymbol2?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\nconst runningLightAnimation = keyframes`\n0% {\n  text-shadow: 0 0 1px #62d5a3, 0 0 2px #62d5a3, 0 0 3px #62d5a3, 0 0 4px #62d5a3;\n}\n50% {\n  text-shadow: 0 0 1px #62d5a3, 0 0 2px #62d5a3, 0 0 3px #62d5a3, 0 0 4px #62d5a3;\n}\n100% {\n  text-shadow: 0 0 1px #62d5a3, 0 0 2px #62d5a3, 0 0 3px #62d5a3, 0 0 4px #62d5a3;\n} \n`;\n\nconst Title = styled(Heading)`\n  animation: ${runningLightAnimation} 2s infinite; /* Alkalmazzuk az animációt */\n  color: #fff;\n`;\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol1,\n  lpLabel2,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol1}  width={90} height={90} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Title mt=\"0px\">{lpLabel.split(' ')[0]}</Title>\n        <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Text fontSize='13px' color=\"#F3BA2F\"  mb=\"4px\">{lpLabel2.split(' ')[0]}</Text>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n      </Flex>\n\n    </Wrapper>\n  )\n}\n\nexport default CardHeading","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js/bignumber'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js/bignumber'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  const callOptions = {\n    gasLimit: 381000,\n  }\n  \n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'VIZSLASWAP' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve before Staking')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          VIZSLASWAP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState } from 'react'\nimport { useLocation, Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton , Button} from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport {  BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\nconst ButtonText = styled(Text)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.xs} {\n    display: block;\n  }\n`\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 1px solid ${({ theme }) => theme.colors.secondary};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const lpLabel2 = farm.lpSymbol2 && farm.lpSymbol2.toUpperCase().replace('', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('VIZSLASWAP')\n  const lpLabel3 = farm.lpSymbol3 && farm.lpSymbol3\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n\n  const addLiquidityUrl = `add${lpLabel3}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.isEvent === (true)\n  const farmImage = farm.lpSymbol1.split(' ')[0].toLocaleLowerCase()\n\n\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          lpLabel2={lpLabel2}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          farmImage={farmImage}\n          tokenSymbol1={farm.token.symbol}\n          tokenSymbol2={farm.token.symbol}\n          />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <>\n                  {displayApr}%\n                </>\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n           {!removed &&  (\n        <Button color='primary' variant='secondary' mt={10} as={Link} to={addLiquidityUrl} >\n        <ButtonText color=\"text\" bold fontSize=\"15px\">\n              {t('Get LP', { symbol: lpLabel })}\n        </ButtonText>\n                  </Button>\n        )}\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n           \n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  label2: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\nconst runningLightAnimation = keyframes`\n  0% {\n    text-shadow: 0 0 0.6px #62d5a3, 0 0 1.2px #62d5a3, 0 0 1.6px #62d5a3, 0 0 2.5px #62d5a3;\n  }\n  50% {\n    text-shadow: 0 0 0.6px #62d5a3, 0 0 1.2px #62d5a3, 0 0 1.6px #62d5a3, 0 0 2.5px #62d5a3;\n  }\n  100% {\n    text-shadow: 0 0 0.6px #62d5a3, 0 0 1.2px #62d5a3, 0 0 1.6px #62d5a3, 0 0 2.5px #62d5a3;\n  } \n`;\nconst Title = styled(Text)`\n    animation: ${runningLightAnimation} 2s infinite; /* Alkalmazzuk az animációt */\n    color: #fff;\n`;\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, label2, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={30} height={30} mr=\"10px\" />\n      <div>\n        {handleRenderFarming()}\n        <Title bold>{label}</Title>\n        <Text color=\"gold\" fontSize=\"10px\" bold>{label2}</Text>\n\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 40px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      {t('The multiplier represents the amount of VIZSLASWAP rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 0.04 VIZSLASWAP per block, a 100x farm would be getting 4 VIZSLASWAP per block.')}\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js/bignumber'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 60px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          VIZSLASWAP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'VIZSLASWAP' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  lpSymbol3\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n\n  const addLiquidityUrl = `add${lpSymbol3}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n          {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Approve before Staking')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation, Link } from 'react-router-dom'\nimport { LinkExternal, Text, Button } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background:rgb(0,47,46);\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\nconst ButtonText = styled(Text)`\n  display: none;\n  ${({ theme }) => theme.mediaQueries.xs} {\n    display: block;\n  }\n`\n\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual , lpSymbol3} = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n              <Button  as={Link} width={100}  height={30} color=\"text\" variant='secondary' to={`/add${lpSymbol3}/${liquidityUrlPathParts}`}  >\n              <ButtonText  color=\"text\" bold fontSize=\"15px\">\n              {t('Get LP', { symbol: lpLabel })}\n        </ButtonText>\n        </Button>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid rgb(0,47,46);\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot , Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/mining':\n      activeIndex = 0\n      break\n    case '/mining/history':\n      activeIndex = 1\n      break\n    case '/mining/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live ')}\n          <Text color='text'fontSize=\"15px\" bold ml=\"4px\">   \n          {t('(12)')}\n          </Text>\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`} mt=\"4px\">\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { useWeb3React } from '@web3-react/core/core/core'\nimport { Image, Heading, RowType, Toggle, Text, Skeleton, Box, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled, { keyframes } from 'styled-components';\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { getBalanceNumber, formatLocalisedCompactNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { usePriceCakeBusd , usePriceHVIBusd, usePriceFpsBusd, usePollFarmsData,useFarms, usePriceLGCBusd, usePriceBnbBusd,usePriceliraBusd, usePriceLameaBusd, usePriceBVCBusd, usePriceBABYVIZSLABusd, usePriceETCBusd, usePriceATALIRABusd, usePriceEXZOBusd, usePriceskeletonBusd, usePricetripBusd, usePricebuildBusd, usePricebabyBusd, usePricefrtcBusd, usePricebeethBusd } from 'state/farms/hooks'\nimport { getAddress, getHVIAddress , getCakeAddress, getWbnbAddress, getFarm1Address, getlgcAddress, geLiraAddress, getFarm2Address, gettripAddress,getFarm4Address,getFarm5Address, getBusdAddress, getFarm3Address, getFarm6Address , getFarm7Address, getLAMEAAddress, getFarm8Address, getbvcAddress, getFarm9Address, getbabyvizslaAddress, getFarm10Address, getfpsAddress, getFarm11Address, getskeletonAddress, getFarm12Address, getFarm13Address, getFarm14Address , getFarm15Address, getFarm16Address , getFarm28Address, getFarm17Address, getFarm18Address, getFarm19Address, getFarm20Address, getFarm21Address, getbuildAddress, getethAddress, getataliraAddress, getexzoAddress, getbabyAddress, getFarm26Address, getFarm27Address, getFRTCAddress, getbeethAddress, getFarm29Address} from 'utils/addressHelpers'\nimport { useTotalSupply, useVizslaLPBalance ,useTotalSupplyVIZSLAHVI, useFarm1,useTotalSupplyFarm1 , useMaster1 , useFarm2 ,useFarm3,useFarm4, useTotalSupplyFarm2, useTotalSupplyFarm3, useTotalSupplyFarm4, useFarm5, useTotalSupplyFarm5, useFarm6 , useTotalSupplyFarm6 , useFarm7 , useTotalSupplyFarm7, useTotalSupplyFarm8, useFarm9, useTotalSupplyFarm9 , useFarm10, useTotalSupplyFarm10 , useTotalSupplyFarm11, useFarm17, useFarm18, useFarm19, useFarm21, useTotalSupplyFarm12, useTotalSupplyFarm13, useTotalSupplyFarm14,useTotalSupplyFarm15, useTotalSupplyFarm16, useTotalSupplyFarm17, useTotalSupplyFarm18, useTotalSupplyFarm19, useTotalSupplyFarm20,useTotalSupplyFarm21, useTotalSupplyFarm26, useTotalSupplyFarm27, useTotalSupplyFarm28, useFarm29, useTotalSupplyFarm29 } from 'hooks/useTokenBalance'\nimport Balance from 'components/Balance'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\n\nconst runningLightAnimation = keyframes`\n  0% {\n    text-shadow: 0 0 2.5px #62d5a3, 0 0 5px #62d5a3, 0 0 7.5px #62d5a3, 0 0 10px #62d5a3;\n  }\n  50% {\n    text-shadow: 0 0 2.5px #62d5a3, 0 0 5px #62d5a3, 0 0 7.5px #62d5a3, 0 0 10px #62d5a3;\n  }\n  100% {\n    text-shadow: 0 0 2.5px #62d5a3, 0 0 5px #62d5a3, 0 0 7.5px #62d5a3, 0 0 10px #62d5a3;\n  }\n`;\nconst Title = styled(Heading)`\n    animation: ${runningLightAnimation} 2s infinite; /* Alkalmazzuk az animációt */\n    color: #fff;\n`;\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 50px;\n  border-radius: 16px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 20px 32px;\n    background-color: rgb(19,47,46) ;\n    border: solid 1.5px ${({ theme }) => theme.colors.cardBorder};\n    margin-bottom: 50;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 20px 32px;\n    background-color: rgb(19,47,46) ;\n    border: solid 1.5px ${({ theme }) => theme.colors.cardBorder};\n    margin-bottom: 50;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n// price\n\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n          case 'boosted':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.isCommunity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n    const lpLabel2 = farm.lpSymbol2 && farm.lpSymbol2.split(' ')[0].toUpperCase().replace('', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol1.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        label2: lpLabel2,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Title as=\"h1\" scale=\"xxl\" mb=\"24px\">\n          {t('Liquidity Mining')}\n        </Title>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                  {\n                    label: t('Boosted'),\n                    value: 'boosted',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}