{"version":3,"sources":["views/Pool/index.tsx"],"names":["Body","styled","CardBody","nav","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useLocation","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","title","subtitle","alignItems","justifyContent","component","mb","mt","variant","endIcon","src","alt","height","width","to","as","Link","color","textAlign","index","pair","flexDirection","id","scale","style","startIcon"],"mappings":"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","file":"static/js/27.ea694eda.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Pair } from '@pancakeswap/sdk'\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon , Image, ButtonMenu, ButtonMenuItem,ChevronDownIcon, SubMenuItem, SubMenu,} from '@pancakeswap/uikit'\nimport { Link, useLocation } from 'react-router-dom'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport FullPositionCard from '../../components/PositionCard'\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\nimport { usePairs } from '../../hooks/usePairs'\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../PageL'\n\nconst Body = styled(CardBody)`\n  background-color: #152121;\n`\nconst StyledNav = styled.nav`\n  margin-top: 40px;\n`\nexport default function Pool() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const location = useLocation()\n \n  // fetch the user's balances of all tracked V2 LP tokens\n  const trackedTokenPairs = useTrackedTokenPairs()\n  const tokenPairsWithLiquidityTokens = useMemo(\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\n    [trackedTokenPairs],\n  )\n  const liquidityTokens = useMemo(\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\n    [tokenPairsWithLiquidityTokens],\n  )\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\n    account ?? undefined,\n    liquidityTokens,\n  )\n\n  // fetch the reserves for all V2 pools in which the user has a balance\n  const liquidityTokensWithBalances = useMemo(\n    () =>\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\n      ),\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\n  )\n\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\n  const v2IsLoading =\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\n\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\n  const getActiveIndex = (pathname: string): number => {\n    if (\n      pathname.includes('/pool') ||\n      pathname.includes('/create') ||\n      pathname.includes('/add') ||\n      pathname.includes('/remove') ||\n      pathname.includes('/find') ||\n      pathname.includes('/liquidity')\n    ) {\n      return 0\n    }\n    return 1\n  }\n  const renderBody = () => {\n    if (!account) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          {t('Connect to a wallet to view your liquidity.')}\n        </Text>\n      )\n    }\n    if (v2IsLoading) {\n      return (\n        <Text color=\"textSubtle\" textAlign=\"center\">\n          <Dots>{t('Loading')}</Dots>\n        </Text>\n      )\n    }\n    if (allV2PairsWithLiquidity?.length > 0) {\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\n        <FullPositionCard\n          key={v2Pair.liquidityToken.address}\n          pair={v2Pair}\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\n        />\n      ))\n    }\n    return (\n      <Text color=\"textSubtle\" textAlign=\"center\">\n        {t('No liquidity found.')}\n      </Text>\n    )\n  }\n\n  return (\n    <Page>\n     \n      <AppBody>\n        <AppHeader title={t('Your Liquidity')} subtitle={t('Remove liquidity to receive tokens back')} />\n        <Flex alignItems=\"center\" justifyContent=\"right\" >\n\n<SubMenu  component={<Button  mb=\"10px\" mt=\"10px\"  variant=\"tertiary\"  endIcon={<ChevronDownIcon/>}  >   \n      <img src=\"/images/routers/1.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n      <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n\n         PancakeSwap</Button>}>     \n            <SubMenuItem   to=\"/apeliquidity\" as={Link} color=\"text\">\n             <img src=\"/images/routers/2.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('ApeSwap')}\n            </SubMenuItem>\n            <SubMenuItem  to=\"/babydogeliquidity\" as={Link} color=\"text\">\n            <img src=\"/images/routers/6.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('BabyDoge')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/biswapliquidity\" as={Link} color=\"text\">\n             <img src=\"/images/routers/5.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('Biswap')}\n            </SubMenuItem>\n            <SubMenuItem   to=\"/radioliquidity\" as={Link} color=\"text\">\n            <img src=\"/images/routers/4.png\" alt=\"router\"  height=\"24px\" width=\"24px\" />\n            <img src=\"/images/routers/999.png\" alt=\"space\"  height=\"5px\" width=\"5px\" />\n              {t('RadioShack')}\n            </SubMenuItem>\n        </SubMenu>\n        </Flex>\n        <Body>\n          {renderBody()}\n          {account && !v2IsLoading && (\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\n              <Text color=\"textSubtle\" mb=\"8px\">\n                {t(\"Don't see a pool you joined?\")}\n              </Text>\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\n                {t('Find other LP tokens')}\n              </Button>\n            </Flex>\n          )}\n        </Body>\n        <CardFooter style={{ textAlign: 'center' }}>\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\n            {t('Add Liquidity')}\n          </Button>\n        </CardFooter>\n      </AppBody>\n      \n    </Page>\n  )\n}\n"],"sourceRoot":""}