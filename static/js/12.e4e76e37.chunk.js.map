{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/bscscan.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","RainbowLight","keyframes","StyledCardAccent","FCard","isPromotedFarm","radii","card","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","undefined","minimumFractionDigits","maximumFractionDigits","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isEvent","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","useEffect","current","ml","marginBottom","marginTop","expandAnimation","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","SearchInput","event","target","sort","b","exact","renderContent","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","CardValue","lineHeight"],"mappings":"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","file":"static/js/12.e4e76e37.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={90} height={90} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n  const dispatch = useAppDispatch()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          VIZSLASWAP\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <>\n    </>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\n \nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgb(0,0,0) 0%,\n    rgb(0,0,0) 10%,\n    rgb(0, 0, 0)20%,\n    rgb(13, 36, 34) 30%,\n    rgb(18, 48, 46) 40%,\n    rgb(34,89,84) 50%,\n    rgb(18, 48, 46)60%,\n    rgb(13, 36, 34) 70%,\n    rgb(0, 0, 0) 80%,\n    rgb(0,0,0) 90%,\n    rgb(0,0,0) 100%);\n   );\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 3s linear infinite;\n  border-radius: 30px;\n  filter: blur(0px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background-color: rgb(0, 0, 0) ;\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  opacity: 0.88;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { minimumFractionDigits: 2,maximumFractionDigits: 2 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'VIZSLASWAP'\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.isEvent === (true)\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n            <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                 {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" width={20} height={20} mr=\"10px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 50px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of VIZSLASWAP rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 VIZSLASWAP per block, a 2x farm would be getting 2 VIZSLASWAP per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  width: 55px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\n// TODO: Use `Text` instead\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>VIZSLASWAP </Title>\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = getBep20Contract(lpAddress, web3)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('VIZSLASWAP', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  \n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://vizslaexchange.vizslaswap.com/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n \n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'secondary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'secondary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\n \n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n \n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 50px;\n  background-color: rgb(19,47,46) ;\n  border-radius: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 20px 32px;\n    margin-bottom: 50;\n  }\n`\n \nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n \n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n \n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n   padding: 8px 0px;\n \n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  background-color:   #                                                                           ;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n               <PageHeader>\n\n         <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\"  \n>\n          {t('Liquidity Mining')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n                       </PageHeader>\n                       <Page>\n        <ControlContainer>\n          <ViewControls>\n             <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n       </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n  \n}\n\nexport default CardBusdValue\n"],"sourceRoot":""}