{"version":3,"sources":["views/Profile/index.tsx"],"names":["supabase","createClient","contractABI","Container","styled","div","theme","colors","background","Title","h1","primary","styles","container","display","flexDirection","alignItems","width","margin","padding","border","borderRadius","backgroundColor","chatBox","height","overflowY","marginBottom","color","messageContainer","avatar","marginRight","message","flex","input","button","topListBox","marginTop","textAlign","topList","listStyle","timestamp","fontSize","paginationButton","Profile","account","useWeb3React","useState","messages","setMessages","newMessage","setNewMessage","cooldown","setCooldown","chatBoxRef","useRef","setTopList","top10Addresses","setTop10Addresses","currentPage","setCurrentPage","names","setNames","provider","useMemo","ethers","providers","Web3Provider","window","ethereum","contract","Contract","useEffect","fetchMessages","a","from","select","order","ascending","data","error","console","calculateTopList","fetch","then","response","json","log","catch","subscription","channel","on","event","schema","table","payload","updatedMessages","new","subscribe","removeChannel","current","scrollTop","scrollHeight","timer","setTimeout","clearTimeout","newNames","namePromises","map","user","getName","name","Promise","all","fetchNames","handleSend","trim","text","sender","Date","insert","userMessageCount","Map","forEach","msg","set","get","sortedTopList","Array","entries","sort","b","top10","slice","handlePageChange","page","getSenderName","substring","length","getSenderStyle","includes","index","findIndex","formatTimestamp","date","now","diffInSeconds","Math","floor","minutes","hours","days","getTopListColor","startIndex","endIndex","currentItems","totalPages","ceil","style","ref","src","alt","id","type","value","onChange","e","target","placeholder","disabled","onClick","count","pageNumbers","startPage","i","push","getPageNumbers","pageNumber"],"mappings":"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","file":"static/js/28.533309ab.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { useWeb3React } from '@web3-react/core/core/core';\nimport { Button } from '@pancakeswap/uikit';\nimport { createClient } from '@supabase/supabase-js';\nimport { ethers } from 'ethers';\n\nconst supabaseUrl = 'https://timqecpgicfojmdesoie.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRpbXFlY3BnaWNmb2ptZGVzb2llIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjI4NTgwMzksImV4cCI6MjAzODQzNDAzOX0.WaaYVv4zd0YL9sK7tR-7D7qJ7biRRqKl1lFwiI2HsZc';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n\nconst contractABI = [\n  {\n      \"inputs\": [\n          {\n              \"internalType\": \"string\",\n              \"name\": \"_newName\",\n              \"type\": \"string\"\n          }\n      ],\n      \"name\": \"changeName\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n  },\n  {\n      \"anonymous\": false,\n      \"inputs\": [\n          {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"user\",\n              \"type\": \"address\"\n          },\n          {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"oldName\",\n              \"type\": \"string\"\n          },\n          {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"newName\",\n              \"type\": \"string\"\n          }\n      ],\n      \"name\": \"NameChanged\",\n      \"type\": \"event\"\n  },\n  {\n      \"anonymous\": false,\n      \"inputs\": [\n          {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"user\",\n              \"type\": \"address\"\n          },\n          {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"name\",\n              \"type\": \"string\"\n          }\n      ],\n      \"name\": \"NameRegistered\",\n      \"type\": \"event\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"internalType\": \"string\",\n              \"name\": \"_name\",\n              \"type\": \"string\"\n          }\n      ],\n      \"name\": \"registerName\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"internalType\": \"string\",\n              \"name\": \"_name\",\n              \"type\": \"string\"\n          }\n      ],\n      \"name\": \"getAddress\",\n      \"outputs\": [\n          {\n              \"internalType\": \"address\",\n              \"name\": \"\",\n              \"type\": \"address\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [\n          {\n              \"internalType\": \"address\",\n              \"name\": \"_user\",\n              \"type\": \"address\"\n          }\n      ],\n      \"name\": \"getName\",\n      \"outputs\": [\n          {\n              \"internalType\": \"string\",\n              \"name\": \"\",\n              \"type\": \"string\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  },\n  {\n      \"inputs\": [],\n      \"name\": \"getUserCount\",\n      \"outputs\": [\n          {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n          }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n  }\n];\n\nconst Container = styled.div`\n  padding: 20px; \n  max-width: 800px; \n  margin: 20px auto;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 15px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  color: ${({ theme }) => theme.colors.primary};\n  font-size: 28px;\n  margin-bottom: 20px;\n  font-family: 'Arial', sans-serif;\n`;\n\nconst Profile = () => {\n  const { account } = useWeb3React();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(''); \n  const [cooldown, setCooldown] = useState(0);\n  const chatBoxRef = useRef(null);\n  const [topList, setTopList] = useState([]);\n  const [top10Addresses, setTop10Addresses] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [names, setNames] = useState({});\n  const itemsPerPage = 25;\n  const contractAddress = '0x674e3eDc898Aa4b486Bd2E5aa2D1C8653677F471';\n  const provider = useMemo(() => new ethers.providers.Web3Provider(window.ethereum), []);\n  const contract = useMemo(() => new ethers.Contract(contractAddress, contractABI, provider), [provider]);\n\n  useEffect(() => {\n      const fetchMessages = async () => {\n          const { data, error } = await supabase\n              .from('messages')\n              .select('*')\n              .order('timestamp', { ascending: true });\n\n          if (error) {\n              console.error('Error fetching messages:', error);\n          } else {\n              setMessages(data || []);\n              calculateTopList(data || []);\n          }\n      };\n      fetch('http://localhost:3001/proxy?url=https://statx.hu/pixel-track/gLv9fZ52ZvzweVeF')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n    // Itt dolgozd fel a kapott adatokat\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n\n      fetchMessages();\n\n      const subscription = supabase\n          .channel('public:messages')\n          .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'messages' }, (payload) => {\n              setMessages((messages) => {\n                  const updatedMessages = [...messages, payload.new];\n                  calculateTopList(updatedMessages);\n                  return updatedMessages;\n              });\n          })\n          .subscribe();\n\n      return () => {\n          supabase.removeChannel(subscription);\n      };\n  }, []);\n\n  useEffect(() => {\n      if (chatBoxRef.current) {\n          chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n      }\n  }, [messages]);\n\n  useEffect(() => {\n      if (cooldown > 0) {\n          const timer = setTimeout(() => setCooldown(cooldown - 1), 1000);\n          return () => clearTimeout(timer);\n      }\n      return undefined;\n  }, [cooldown]);\n\n  useEffect(() => {\n      if (!account) return;\n\n      const fetchNames = async () => {\n          const newNames = {};\n          const namePromises = topList.map(async ([user]) => {\n              try {\n                  const name = await contract.getName(user);\n                  if (name) {\n                      newNames[user] = name;\n                  }\n              } catch (error) {\n                  console.error(`Error fetching name for ${user}:`, error);\n              }\n          });\n          await Promise.all(namePromises);\n          setNames(newNames);\n      };\n\n      fetchNames();\n  }, [topList, account, contract]);\n\n  const handleSend = async () => {\n      if (cooldown > 0) return;\n\n      if (newMessage.trim() === '') return;\n\n      const message = {\n          text: newMessage,\n          sender: account,\n          timestamp: new Date()\n      };\n\n      const { data, error } = await supabase.from('messages').insert([message]);\n\n      if (error) {\n          console.error('Error inserting message:', error);\n      } else {\n          setMessages((messages) => {\n              const updatedMessages = [...messages, ...(data || [])];\n              calculateTopList(updatedMessages);\n              return updatedMessages;\n          });\n          setNewMessage('');\n          setCooldown(30); // 30 másodperces cooldown\n      }\n  };\n\n  const calculateTopList = (messages) => {\n      const userMessageCount = new Map();\n\n      messages.forEach(msg => {\n          if (msg.text && msg.text.trim() !== '') {\n              userMessageCount.set(msg.sender, (userMessageCount.get(msg.sender) || 0) + 1);\n          }\n      });\n\n      const sortedTopList = Array.from(userMessageCount.entries()).sort((a, b) => b[1] - a[1]);\n      setTopList(sortedTopList);\n\n      const top10 = sortedTopList.slice(0, 25).map(([user]) => user);\n      setTop10Addresses(top10);\n  };\n\n  const handlePageChange = (page) => {\n      setCurrentPage(page);\n  };\n\n  const getSenderName = (sender) => {\n      if (sender === '0xEa9C8f2D9d91cF44206F0d869b9cc39897a13Ae1') {\n          return 'Admin';\n      }\n      return names[sender] || `${sender.substring(0, 5)}...${sender.substring(sender.length - 5)}`;\n  };\n\n  const getSenderStyle = (sender) => {\n      if (sender === '0xEa9C8f2D9d91cF44206F0d869b9cc39897a13Ae1') {\n          return { color: 'gold' };\n      }\n      if (top10Addresses.includes(sender)) {\n          return { color: '#d4af37' }; // Arany\n      }\n      const index = topList.findIndex(([user]) => user === sender);\n      if (index >= 0) {\n          if (index < 25) {\n              return { color: '#d4af37' }; // Arany\n          }\n          if (index < 100) {\n              return { color: '#E5E4E2' }; // Ezüst\n          }\n          if (index < 250) {\n              return { color: '#cd7f32' }; // Bronz\n          }\n      }\n      return { color: '#fff' }; // Fehér\n  };\n\n  const getSenderImage = (sender) => {\n      return sender === '0xEa9C8f2D9d91cF44206F0d869b9cc39897a13Ae1' ? 'images/pixel/LogoDark.png' : 'images/pixel/200.png';\n  };\n\n  const formatTimestamp = (timestamp) => {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInSeconds = Math.floor((now - date) / 1000);\n\n      if (diffInSeconds < 60) {\n          return `${diffInSeconds} seconds ago`;\n      }\n      if (diffInSeconds < 3600) {\n          const minutes = Math.floor(diffInSeconds / 60);\n          return `${minutes} minutes ago`;\n      }\n      if (diffInSeconds < 86400) {\n          const hours = Math.floor(diffInSeconds / 3600);\n          return `${hours} hours ago`;\n      }\n      const days = Math.floor(diffInSeconds / 86400);\n      return `${days} days ago`;\n  };\n\n  const getTopListColor = (index) => {\n      if (index < 25) {\n          return '#d4af37'; // Arany\n      }\n      if (index < 100) {\n          return '#E5E4E2'; // Ezüst\n      }\n      if (index < 250) {\n          return '#cd7f32'; // Bronz\n      }\n      return '#fff'; // Fehér\n  };\n\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentItems = topList.slice(startIndex, endIndex);\n\n  const totalPages = Math.ceil(topList.length / itemsPerPage);\n\n  const getPageNumbers = () => {\n      const pageNumbers = [];\n      const maxPageNumbers = 3;\n      const startPage = currentPage;\n\n      for (let i = 0; i < maxPageNumbers && startPage + i <= totalPages; i++) {\n          pageNumbers.push(startPage + i);\n      }\n\n      return pageNumbers;\n  };\n\n  return (\n      <>\n          <Container>\n              <Title>Chat</Title>\n              <div style={styles.container}>\n                  <div style={styles.chatBox} ref={chatBoxRef}>\n                      {messages.length > 0 ? (\n                          messages.map((msg) => (\n                              <div key={msg.id} style={styles.messageContainer}>\n                                  <img src={getSenderImage(msg.sender)} alt=\"sender\" style={styles.avatar} />\n                                  <div style={styles.message}>\n                                      <b style={getSenderStyle(msg.sender)}>{getSenderName(msg.sender)}:</b> {msg.text}\n                                      <span style={styles.timestamp}>{formatTimestamp(msg.timestamp)}</span>\n                                  </div>\n                              </div>\n                          ))\n                      ) : (\n                          <div style={styles.message}>No messages yet.</div>\n                      )}\n                  </div>\n                  <input\n                      type=\"text\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      style={styles.input}\n                      placeholder={cooldown > 0 ? `Cooldown: ${cooldown}s` : 'Type a message'}\n                      disabled={cooldown > 0}\n                  />\n                  <Button onClick={handleSend} style={styles.button} disabled={cooldown > 0}>Send</Button>\n              </div>\n              <div style={styles.topListBox}>\n                  <h3>Top List</h3>\n                  <ul style={styles.topList}>\n                      {currentItems.map(([user, count], index) => (\n                          <li key={user} style={{ color: getTopListColor(startIndex + index) }}>\n                              {startIndex + index + 1}. {user === '0xEa9C8f2D9d91cF44206F0d869b9cc39897a13Ae1' ? <b>Admin</b> : getSenderName(user)}: {count} messages\n                          </li>\n                      ))}\n                  </ul>\n                  <div>\n                      {currentPage > 1 && (\n                          <Button onClick={() => handlePageChange(currentPage - 1)} style={styles.paginationButton}>\n                              Previous\n                          </Button>\n                      )}\n                      {getPageNumbers().map((pageNumber) => (\n                          <Button\n                              key={pageNumber}\n                              onClick={() => handlePageChange(pageNumber)}\n                              style={styles.paginationButton}\n                          >\n                              {pageNumber}\n                          </Button>\n                      ))}\n                      {currentPage < totalPages && (\n                          <Button onClick={() => handlePageChange(currentPage + 1)} style={styles.paginationButton}>\n                              Next\n                          </Button>\n                      )}\n                  </div>\n              </div>\n          </Container>\n      </>\n  );\n};\n\nconst styles = {\n  container: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: '400px',\n      margin: '0 auto',\n      padding: '10px',\n      border: '1px solid #ccc',\n      borderRadius: '8px',\n      backgroundColor: '#000',\n  },\n  chatBox: {\n      width: '100%',\n      height: '300px',\n      overflowY: 'scroll',\n      marginBottom: '10px',\n      padding: '10px',\n      border: '1px solid #ccc',\n      borderRadius: '8px',\n      backgroundColor: '#000',\n      color: '#fff',\n  },\n  messageContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: '5px 0',\n  },\n  avatar: {\n      width: '30px',\n      height: '30px',\n      marginRight: '10px',\n      borderRadius: '50%',\n  },\n  message: {\n      flex: 1,\n  },\n  input: {\n      width: '100%',\n      padding: '10px',\n      marginBottom: '10px',\n      border: '1px solid #ccc',\n      borderRadius: '4px',\n      backgroundColor: '#fff',\n      color: '#000',\n  },\n  button: {\n      width: '100%',\n  },\n  topListBox: {\n      width: '100%',\n      padding: '10px',\n      border: '1px solid #ccc',\n      borderRadius: '8px',\n      backgroundColor: '#000',\n      color: '#fff',\n      marginTop: '40px',\n      textAlign: 'center',\n  },\n  topList: {\n      listStyle: 'none',\n      padding: '0',\n      margin: '10px 0',\n  },\n  timestamp: {\n      display: 'block',\n      fontSize: '0.8em',\n      color: '#aaa',\n      marginTop: '5px',\n  },\n  paginationButton: {\n      margin: '5px',\n      backgroundColor: '#333',\n      color: '#fff',\n      '&:hover': {\n          backgroundColor: '#555',\n      },\n  },\n};\n\nexport default Profile;"],"sourceRoot":""}